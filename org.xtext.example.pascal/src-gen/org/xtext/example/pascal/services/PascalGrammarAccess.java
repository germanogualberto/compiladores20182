/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.pascal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PascalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadingProgram_heading_blockParserRuleCall_0_0 = (RuleCall)cHeadingAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//program:
		//	heading=program_heading_block block=block ".";
		@Override public ParserRule getRule() { return rule; }
		
		//heading=program_heading_block block=block "."
		public Group getGroup() { return cGroup; }
		
		//heading=program_heading_block
		public Assignment getHeadingAssignment_0() { return cHeadingAssignment_0; }
		
		//program_heading_block
		public RuleCall getHeadingProgram_heading_blockParserRuleCall_0_0() { return cHeadingProgram_heading_blockParserRuleCall_0_0; }
		
		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class Program_heading_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.program_heading_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//program_heading_block:
		//	"program" name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"program" name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelLabel_declarationParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeType_definition_partParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariable_declaration_partParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cConstantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstantConstant_definition_partParserRuleCall_3_0 = (RuleCall)cConstantAssignment_3.eContents().get(0);
		private final Assignment cAbstractionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAbstractionFunction_procedure_declarationParserRuleCall_4_0 = (RuleCall)cAbstractionAssignment_4.eContents().get(0);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatement_partParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		
		//block:
		//	label=label_declaration?
		//	type=type_definition_part?
		//	variable=variable_declaration_part?
		//	constant=constant_definition_part?
		//	abstraction=function_procedure_declaration?
		//	statement=statement_part;
		@Override public ParserRule getRule() { return rule; }
		
		//label=label_declaration? type=type_definition_part? variable=variable_declaration_part?
		//constant=constant_definition_part? abstraction=function_procedure_declaration? statement=statement_part
		public Group getGroup() { return cGroup; }
		
		//label=label_declaration?
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//label_declaration
		public RuleCall getLabelLabel_declarationParserRuleCall_0_0() { return cLabelLabel_declarationParserRuleCall_0_0; }
		
		//type=type_definition_part?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//type_definition_part
		public RuleCall getTypeType_definition_partParserRuleCall_1_0() { return cTypeType_definition_partParserRuleCall_1_0; }
		
		//variable=variable_declaration_part?
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//variable_declaration_part
		public RuleCall getVariableVariable_declaration_partParserRuleCall_2_0() { return cVariableVariable_declaration_partParserRuleCall_2_0; }
		
		//constant=constant_definition_part?
		public Assignment getConstantAssignment_3() { return cConstantAssignment_3; }
		
		//constant_definition_part
		public RuleCall getConstantConstant_definition_partParserRuleCall_3_0() { return cConstantConstant_definition_partParserRuleCall_3_0; }
		
		//abstraction=function_procedure_declaration?
		public Assignment getAbstractionAssignment_4() { return cAbstractionAssignment_4; }
		
		//function_procedure_declaration
		public RuleCall getAbstractionFunction_procedure_declarationParserRuleCall_4_0() { return cAbstractionFunction_procedure_declarationParserRuleCall_4_0; }
		
		//statement=statement_part
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//statement_part
		public RuleCall getStatementStatement_partParserRuleCall_5_0() { return cStatementStatement_partParserRuleCall_5_0; }
	}
	public class Statement_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.statement_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSequenceStatement_sequenceParserRuleCall_1_0 = (RuleCall)cSequenceAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//statement_part:
		//	"begin" sequence=statement_sequence "end";
		@Override public ParserRule getRule() { return rule; }
		
		//"begin" sequence=statement_sequence "end"
		public Group getGroup() { return cGroup; }
		
		//"begin"
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//sequence=statement_sequence
		public Assignment getSequenceAssignment_1() { return cSequenceAssignment_1; }
		
		//statement_sequence
		public RuleCall getSequenceStatement_sequenceParserRuleCall_1_0() { return cSequenceStatement_sequenceParserRuleCall_1_0; }
		
		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class Statement_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.statement_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//statement_sequence:
		//	statements+=statement (";" statements+=statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=statement (";" statements+=statement)*
		public Group getGroup() { return cGroup; }
		
		//statements+=statement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//(";" statements+=statement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//statements+=statement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }
		
		//statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0_0 = (RuleCall)cLabelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSimpleAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSimpleSimple_statementParserRuleCall_1_0_0 = (RuleCall)cSimpleAssignment_1_0.eContents().get(0);
		private final Assignment cStructuredAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStructuredStructured_statementParserRuleCall_1_1_0 = (RuleCall)cStructuredAssignment_1_1.eContents().get(0);
		
		//statement:
		//	(label=label ":")? (simple=simple_statement | structured=structured_statement);
		@Override public ParserRule getRule() { return rule; }
		
		//(label=label ":")? (simple=simple_statement | structured=structured_statement)
		public Group getGroup() { return cGroup; }
		
		//(label=label ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//label=label
		public Assignment getLabelAssignment_0_0() { return cLabelAssignment_0_0; }
		
		//label
		public RuleCall getLabelLabelParserRuleCall_0_0_0() { return cLabelLabelParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//simple=simple_statement | structured=structured_statement
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//simple=simple_statement
		public Assignment getSimpleAssignment_1_0() { return cSimpleAssignment_1_0; }
		
		//simple_statement
		public RuleCall getSimpleSimple_statementParserRuleCall_1_0_0() { return cSimpleSimple_statementParserRuleCall_1_0_0; }
		
		//structured=structured_statement
		public Assignment getStructuredAssignment_1_1() { return cStructuredAssignment_1_1; }
		
		//structured_statement
		public RuleCall getStructuredStructured_statementParserRuleCall_1_1_0() { return cStructuredStructured_statementParserRuleCall_1_1_0; }
	}
	public class Simple_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.simple_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimple_statementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAssignmentAssignment_statementParserRuleCall_1_0_0 = (RuleCall)cAssignmentAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFunctionFunction_designatorParserRuleCall_1_1_0 = (RuleCall)cFunctionAssignment_1_1.eContents().get(0);
		private final Assignment cFunction_noargsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cFunction_noargsIDTerminalRuleCall_1_2_0 = (RuleCall)cFunction_noargsAssignment_1_2.eContents().get(0);
		
		//simple_statement:
		//	{simple_statement} (assignment=assignment_statement | function=function_designator | function_noargs=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{simple_statement} (assignment=assignment_statement | function=function_designator | function_noargs=ID)?
		public Group getGroup() { return cGroup; }
		
		//{simple_statement}
		public Action getSimple_statementAction_0() { return cSimple_statementAction_0; }
		
		//(assignment=assignment_statement | function=function_designator | function_noargs=ID)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//assignment=assignment_statement
		public Assignment getAssignmentAssignment_1_0() { return cAssignmentAssignment_1_0; }
		
		//assignment_statement
		public RuleCall getAssignmentAssignment_statementParserRuleCall_1_0_0() { return cAssignmentAssignment_statementParserRuleCall_1_0_0; }
		
		//function=function_designator
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }
		
		//function_designator
		public RuleCall getFunctionFunction_designatorParserRuleCall_1_1_0() { return cFunctionFunction_designatorParserRuleCall_1_1_0; }
		
		//function_noargs=ID
		public Assignment getFunction_noargsAssignment_1_2() { return cFunction_noargsAssignment_1_2; }
		
		//ID
		public RuleCall getFunction_noargsIDTerminalRuleCall_1_2_0() { return cFunction_noargsIDTerminalRuleCall_1_2_0; }
	}
	public class Structured_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.structured_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCompoundAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundCompound_statementParserRuleCall_0_0 = (RuleCall)cCompoundAssignment_0.eContents().get(0);
		private final Assignment cWhile_stmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWhile_stmtWhile_statementParserRuleCall_1_0 = (RuleCall)cWhile_stmtAssignment_1.eContents().get(0);
		
		//structured_statement:
		//	compound=compound_statement
		//	| while_stmt=while_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//compound=compound_statement | while_stmt=while_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//compound=compound_statement
		public Assignment getCompoundAssignment_0() { return cCompoundAssignment_0; }
		
		//compound_statement
		public RuleCall getCompoundCompound_statementParserRuleCall_0_0() { return cCompoundCompound_statementParserRuleCall_0_0; }
		
		//while_stmt=while_statement
		public Assignment getWhile_stmtAssignment_1() { return cWhile_stmtAssignment_1; }
		
		//while_statement
		public RuleCall getWhile_stmtWhile_statementParserRuleCall_1_0() { return cWhile_stmtWhile_statementParserRuleCall_1_0; }
	}
	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.compound_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSequenceStatement_sequenceParserRuleCall_1_0 = (RuleCall)cSequenceAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//compound_statement:
		//	"begin" sequence=statement_sequence "end";
		@Override public ParserRule getRule() { return rule; }
		
		//"begin" sequence=statement_sequence "end"
		public Group getGroup() { return cGroup; }
		
		//"begin"
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//sequence=statement_sequence
		public Assignment getSequenceAssignment_1() { return cSequenceAssignment_1; }
		
		//statement_sequence
		public RuleCall getSequenceStatement_sequenceParserRuleCall_1_0() { return cSequenceStatement_sequenceParserRuleCall_1_0; }
		
		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class Assignment_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.assignment_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//assignment_statement:
		//	variable=variable ":=" expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=variable ":=" expression=expression
		public Group getGroup() { return cGroup; }
		
		//variable=variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberINTEGER_NUMBERTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//label:
		//	number=SIGNED_INTEGER_NUMBER | number=INTEGER_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//number=SIGNED_INTEGER_NUMBER | number=INTEGER_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=SIGNED_INTEGER_NUMBER
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//SIGNED_INTEGER_NUMBER
		public RuleCall getNumberSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0() { return cNumberSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0; }
		
		//number=INTEGER_NUMBER
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INTEGER_NUMBER
		public RuleCall getNumberINTEGER_NUMBERTerminalRuleCall_1_0() { return cNumberINTEGER_NUMBERTerminalRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//expression_list:
		//	expressions+=expression ("," expressions+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=expression ("," expressions+=expression)*
		public Group getGroup() { return cGroup; }
		
		//expressions+=expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }
		
		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }
		
		//("," expressions+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expressions+=expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }
		
		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsSimple_expressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cOperatorsRELATIONAL_OPTerminalRuleCall_1_0_0_0 = (RuleCall)cOperatorsAssignment_1_0_0.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorsInKeyword_1_0_1_0 = (Keyword)cOperatorsAssignment_1_0_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cOperatorsEqualsSignKeyword_1_0_2_0 = (Keyword)cOperatorsAssignment_1_0_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsSimple_expressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//expression:
		//	expressions+=simple_expression ((operators+=RELATIONAL_OP | operators+="in" | operators+="=")
		//	expressions+=simple_expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=simple_expression ((operators+=RELATIONAL_OP | operators+="in" | operators+="=")
		//expressions+=simple_expression)?
		public Group getGroup() { return cGroup; }
		
		//expressions+=simple_expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }
		
		//simple_expression
		public RuleCall getExpressionsSimple_expressionParserRuleCall_0_0() { return cExpressionsSimple_expressionParserRuleCall_0_0; }
		
		//((operators+=RELATIONAL_OP | operators+="in" | operators+="=") expressions+=simple_expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+=RELATIONAL_OP | operators+="in" | operators+="="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//operators+=RELATIONAL_OP
		public Assignment getOperatorsAssignment_1_0_0() { return cOperatorsAssignment_1_0_0; }
		
		//RELATIONAL_OP
		public RuleCall getOperatorsRELATIONAL_OPTerminalRuleCall_1_0_0_0() { return cOperatorsRELATIONAL_OPTerminalRuleCall_1_0_0_0; }
		
		//operators+="in"
		public Assignment getOperatorsAssignment_1_0_1() { return cOperatorsAssignment_1_0_1; }
		
		//"in"
		public Keyword getOperatorsInKeyword_1_0_1_0() { return cOperatorsInKeyword_1_0_1_0; }
		
		//operators+="="
		public Assignment getOperatorsAssignment_1_0_2() { return cOperatorsAssignment_1_0_2; }
		
		//"="
		public Keyword getOperatorsEqualsSignKeyword_1_0_2_0() { return cOperatorsEqualsSignKeyword_1_0_2_0; }
		
		//expressions+=simple_expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }
		
		//simple_expression
		public RuleCall getExpressionsSimple_expressionParserRuleCall_1_1_0() { return cExpressionsSimple_expressionParserRuleCall_1_1_0; }
	}
	public class Simple_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.simple_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixOperatorADDITION_OPTerminalRuleCall_0_0 = (RuleCall)cPrefixOperatorAssignment_0.eContents().get(0);
		private final Assignment cTermsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_1_0 = (RuleCall)cTermsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cOperatorsAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cOperatorsADDITION_OPTerminalRuleCall_2_0_0_0_0 = (RuleCall)cOperatorsAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cOperatorsAssignment_2_0_0_1 = (Assignment)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cOperatorsOrKeyword_2_0_0_1_0 = (Keyword)cOperatorsAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cTermsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_0_1_0 = (RuleCall)cTermsAssignment_2_0_1.eContents().get(0);
		private final Assignment cTermsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTermsUnsigned_numberParserRuleCall_2_1_0 = (RuleCall)cTermsAssignment_2_1.eContents().get(0);
		
		//simple_expression:
		//	prefixOperator=ADDITION_OP? terms+=term ((operators+=ADDITION_OP | operators+="or") terms+=term |
		//	terms+=unsigned_number)*;
		@Override public ParserRule getRule() { return rule; }
		
		//prefixOperator=ADDITION_OP? terms+=term ((operators+=ADDITION_OP | operators+="or") terms+=term |
		//terms+=unsigned_number)*
		public Group getGroup() { return cGroup; }
		
		//prefixOperator=ADDITION_OP?
		public Assignment getPrefixOperatorAssignment_0() { return cPrefixOperatorAssignment_0; }
		
		//ADDITION_OP
		public RuleCall getPrefixOperatorADDITION_OPTerminalRuleCall_0_0() { return cPrefixOperatorADDITION_OPTerminalRuleCall_0_0; }
		
		//terms+=term
		public Assignment getTermsAssignment_1() { return cTermsAssignment_1; }
		
		//term
		public RuleCall getTermsTermParserRuleCall_1_0() { return cTermsTermParserRuleCall_1_0; }
		
		//((operators+=ADDITION_OP | operators+="or") terms+=term | terms+=unsigned_number)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(operators+=ADDITION_OP | operators+="or") terms+=term
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//operators+=ADDITION_OP | operators+="or"
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//operators+=ADDITION_OP
		public Assignment getOperatorsAssignment_2_0_0_0() { return cOperatorsAssignment_2_0_0_0; }
		
		//ADDITION_OP
		public RuleCall getOperatorsADDITION_OPTerminalRuleCall_2_0_0_0_0() { return cOperatorsADDITION_OPTerminalRuleCall_2_0_0_0_0; }
		
		//operators+="or"
		public Assignment getOperatorsAssignment_2_0_0_1() { return cOperatorsAssignment_2_0_0_1; }
		
		//"or"
		public Keyword getOperatorsOrKeyword_2_0_0_1_0() { return cOperatorsOrKeyword_2_0_0_1_0; }
		
		//terms+=term
		public Assignment getTermsAssignment_2_0_1() { return cTermsAssignment_2_0_1; }
		
		//term
		public RuleCall getTermsTermParserRuleCall_2_0_1_0() { return cTermsTermParserRuleCall_2_0_1_0; }
		
		//terms+=unsigned_number
		public Assignment getTermsAssignment_2_1() { return cTermsAssignment_2_1; }
		
		//unsigned_number
		public RuleCall getTermsUnsigned_numberParserRuleCall_2_1_0() { return cTermsUnsigned_numberParserRuleCall_2_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorsFactorParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cOperatorsMULTIPLICATION_OPTerminalRuleCall_1_0_0_0 = (RuleCall)cOperatorsAssignment_1_0_0.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorsAndKeyword_1_0_1_0 = (Keyword)cOperatorsAssignment_1_0_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsFactorParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		
		//term:
		//	factors+=factor ((operators+=MULTIPLICATION_OP | operators+="and") factors+=factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//factors+=factor ((operators+=MULTIPLICATION_OP | operators+="and") factors+=factor)*
		public Group getGroup() { return cGroup; }
		
		//factors+=factor
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }
		
		//factor
		public RuleCall getFactorsFactorParserRuleCall_0_0() { return cFactorsFactorParserRuleCall_0_0; }
		
		//((operators+=MULTIPLICATION_OP | operators+="and") factors+=factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+=MULTIPLICATION_OP | operators+="and"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//operators+=MULTIPLICATION_OP
		public Assignment getOperatorsAssignment_1_0_0() { return cOperatorsAssignment_1_0_0; }
		
		//MULTIPLICATION_OP
		public RuleCall getOperatorsMULTIPLICATION_OPTerminalRuleCall_1_0_0_0() { return cOperatorsMULTIPLICATION_OPTerminalRuleCall_1_0_0_0; }
		
		//operators+="and"
		public Assignment getOperatorsAssignment_1_0_1() { return cOperatorsAssignment_1_0_1; }
		
		//"and"
		public Keyword getOperatorsAndKeyword_1_0_1_0() { return cOperatorsAndKeyword_1_0_1_0; }
		
		//factors+=factor
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }
		
		//factor
		public RuleCall getFactorsFactorParserRuleCall_1_1_0() { return cFactorsFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cBooleanTrueKeyword_3_0 = (Keyword)cBooleanAssignment_3.eContents().get(0);
		private final Assignment cBooleanAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cBooleanFalseKeyword_4_0 = (Keyword)cBooleanAssignment_4.eContents().get(0);
		private final Assignment cFunctionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFunctionFunction_designatorParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cNotKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNotAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNotFactorParserRuleCall_7_1_0 = (RuleCall)cNotAssignment_7_1.eContents().get(0);
		private final Assignment cNilAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNilNilKeyword_8_0 = (Keyword)cNilAssignment_8.eContents().get(0);
		
		//factor:
		//	variable=variable
		//	| number=number
		//	| string=STRING
		//	| boolean="true"
		//	| boolean="false"
		//	| function=function_designator
		//	| "(" expression=expression ")"
		//	| "not" not=factor
		//	| nil?="nil";
		@Override public ParserRule getRule() { return rule; }
		
		//variable=variable | number=number | string=STRING | boolean="true" | boolean="false" | function=function_designator |
		//"(" expression=expression ")" | "not" not=factor | nil?="nil"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//number=number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean="true"
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//"true"
		public Keyword getBooleanTrueKeyword_3_0() { return cBooleanTrueKeyword_3_0; }
		
		//boolean="false"
		public Assignment getBooleanAssignment_4() { return cBooleanAssignment_4; }
		
		//"false"
		public Keyword getBooleanFalseKeyword_4_0() { return cBooleanFalseKeyword_4_0; }
		
		//function=function_designator
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//function_designator
		public RuleCall getFunctionFunction_designatorParserRuleCall_5_0() { return cFunctionFunction_designatorParserRuleCall_5_0; }
		
		//"(" expression=expression ")"
		public Group getGroup_6() { return cGroup_6; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_6_1_0() { return cExpressionExpressionParserRuleCall_6_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//"not" not=factor
		public Group getGroup_7() { return cGroup_7; }
		
		//"not"
		public Keyword getNotKeyword_7_0() { return cNotKeyword_7_0; }
		
		//not=factor
		public Assignment getNotAssignment_7_1() { return cNotAssignment_7_1; }
		
		//factor
		public RuleCall getNotFactorParserRuleCall_7_1_0() { return cNotFactorParserRuleCall_7_1_0; }
		
		//nil?="nil"
		public Assignment getNilAssignment_8() { return cNilAssignment_8; }
		
		//"nil"
		public Keyword getNilNilKeyword_8_0() { return cNilNilKeyword_8_0; }
	}
	public class Function_designatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.function_designator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpression_listParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//function_designator:
		//	name=ID "(" expressions=expression_list? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "(" expressions=expression_list? ")"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expressions=expression_list?
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//expression_list
		public RuleCall getExpressionsExpression_listParserRuleCall_2_0() { return cExpressionsExpression_listParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class Function_procedure_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.function_procedure_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFunctionsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cFunctionsFunction_declarationParserRuleCall_0_0_0 = (RuleCall)cFunctionsAssignment_0_0.eContents().get(0);
		private final Assignment cProceduresAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cProceduresProcedure_declarationParserRuleCall_0_1_0 = (RuleCall)cProceduresAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//function_procedure_declaration:
		//	((functions+=function_declaration | procedures+=procedure_declaration) ";")+;
		@Override public ParserRule getRule() { return rule; }
		
		//((functions+=function_declaration | procedures+=procedure_declaration) ";")+
		public Group getGroup() { return cGroup; }
		
		//functions+=function_declaration | procedures+=procedure_declaration
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//functions+=function_declaration
		public Assignment getFunctionsAssignment_0_0() { return cFunctionsAssignment_0_0; }
		
		//function_declaration
		public RuleCall getFunctionsFunction_declarationParserRuleCall_0_0_0() { return cFunctionsFunction_declarationParserRuleCall_0_0_0; }
		
		//procedures+=procedure_declaration
		public Assignment getProceduresAssignment_0_1() { return cProceduresAssignment_0_1; }
		
		//procedure_declaration
		public RuleCall getProceduresProcedure_declarationParserRuleCall_0_1_0() { return cProceduresProcedure_declarationParserRuleCall_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class Function_headingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.function_heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersFormal_parameter_listParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeIDTerminalRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		
		//function_heading abstraction_heading:
		//	"function" name=ID parameters=formal_parameter_list? ":" returnType=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" name=ID parameters=formal_parameter_list? ":" returnType=ID
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=formal_parameter_list?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//formal_parameter_list
		public RuleCall getParametersFormal_parameter_listParserRuleCall_2_0() { return cParametersFormal_parameter_listParserRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//returnType=ID
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//ID
		public RuleCall getReturnTypeIDTerminalRuleCall_4_0() { return cReturnTypeIDTerminalRuleCall_4_0; }
	}
	public class Function_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.function_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadingFunction_headingParserRuleCall_0_0 = (RuleCall)cHeadingAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//function_declaration abstraction_declaration:
		//	heading=function_heading ";" block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//heading=function_heading ";" block=block
		public Group getGroup() { return cGroup; }
		
		//heading=function_heading
		public Assignment getHeadingAssignment_0() { return cHeadingAssignment_0; }
		
		//function_heading
		public RuleCall getHeadingFunction_headingParserRuleCall_0_0() { return cHeadingFunction_headingParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//block=block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class Abstraction_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.abstraction_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedure_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunction_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//abstraction_declaration:
		//	procedure_declaration | function_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//procedure_declaration | function_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//procedure_declaration
		public RuleCall getProcedure_declarationParserRuleCall_0() { return cProcedure_declarationParserRuleCall_0; }
		
		//function_declaration
		public RuleCall getFunction_declarationParserRuleCall_1() { return cFunction_declarationParserRuleCall_1; }
	}
	public class Abstraction_headingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.abstraction_heading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedure_headingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunction_headingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//abstraction_heading:
		//	procedure_heading | function_heading;
		@Override public ParserRule getRule() { return rule; }
		
		//procedure_heading | function_heading
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//procedure_heading
		public RuleCall getProcedure_headingParserRuleCall_0() { return cProcedure_headingParserRuleCall_0; }
		
		//function_heading
		public RuleCall getFunction_headingParserRuleCall_1() { return cFunction_headingParserRuleCall_1; }
	}
	public class Procedure_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.procedure_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadingProcedure_headingParserRuleCall_0_0 = (RuleCall)cHeadingAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//procedure_declaration abstraction_declaration:
		//	heading=procedure_heading ";" block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//heading=procedure_heading ";" block=block
		public Group getGroup() { return cGroup; }
		
		//heading=procedure_heading
		public Assignment getHeadingAssignment_0() { return cHeadingAssignment_0; }
		
		//procedure_heading
		public RuleCall getHeadingProcedure_headingParserRuleCall_0_0() { return cHeadingProcedure_headingParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//block=block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class Procedure_headingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.procedure_heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersFormal_parameter_listParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		
		//procedure_heading abstraction_heading:
		//	"procedure" name=ID parameters=formal_parameter_list?;
		@Override public ParserRule getRule() { return rule; }
		
		//"procedure" name=ID parameters=formal_parameter_list?
		public Group getGroup() { return cGroup; }
		
		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=formal_parameter_list?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//formal_parameter_list
		public RuleCall getParametersFormal_parameter_listParserRuleCall_2_0() { return cParametersFormal_parameter_listParserRuleCall_2_0; }
	}
	public class Formal_parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.formal_parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersFormal_parameter_sectionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersFormal_parameter_sectionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//formal_parameter_list:
		//	"(" parameters+=formal_parameter_section (";" parameters+=formal_parameter_section)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" parameters+=formal_parameter_section (";" parameters+=formal_parameter_section)* ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//parameters+=formal_parameter_section
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//formal_parameter_section
		public RuleCall getParametersFormal_parameter_sectionParserRuleCall_1_0() { return cParametersFormal_parameter_sectionParserRuleCall_1_0; }
		
		//(";" parameters+=formal_parameter_section)*
		public Group getGroup_2() { return cGroup_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//parameters+=formal_parameter_section
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//formal_parameter_section
		public RuleCall getParametersFormal_parameter_sectionParserRuleCall_2_1_0() { return cParametersFormal_parameter_sectionParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class Formal_parameter_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.formal_parameter_section");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueValue_parameter_sectionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariable_parameter_sectionParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cProcedureAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cProcedureProcedure_headingParserRuleCall_2_0 = (RuleCall)cProcedureAssignment_2.eContents().get(0);
		private final Assignment cFunctionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionFunction_headingParserRuleCall_3_0 = (RuleCall)cFunctionAssignment_3.eContents().get(0);
		
		//formal_parameter_section:
		//	value=value_parameter_section | variable=variable_parameter_section | procedure=procedure_heading |
		//	function=function_heading;
		@Override public ParserRule getRule() { return rule; }
		
		//value=value_parameter_section | variable=variable_parameter_section | procedure=procedure_heading |
		//function=function_heading
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=value_parameter_section
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//value_parameter_section
		public RuleCall getValueValue_parameter_sectionParserRuleCall_0_0() { return cValueValue_parameter_sectionParserRuleCall_0_0; }
		
		//variable=variable_parameter_section
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//variable_parameter_section
		public RuleCall getVariableVariable_parameter_sectionParserRuleCall_1_0() { return cVariableVariable_parameter_sectionParserRuleCall_1_0; }
		
		//procedure=procedure_heading
		public Assignment getProcedureAssignment_2() { return cProcedureAssignment_2; }
		
		//procedure_heading
		public RuleCall getProcedureProcedure_headingParserRuleCall_2_0() { return cProcedureProcedure_headingParserRuleCall_2_0; }
		
		//function=function_heading
		public Assignment getFunctionAssignment_3() { return cFunctionAssignment_3; }
		
		//function_heading
		public RuleCall getFunctionFunction_headingParserRuleCall_3_0() { return cFunctionFunction_headingParserRuleCall_3_0; }
	}
	public class Value_parameter_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.value_parameter_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIdentifier_listParserRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeParameter_typeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//value_parameter_section:
		//	identifiers=identifier_list ":" type=parameter_type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifiers=identifier_list ":" type=parameter_type
		public Group getGroup() { return cGroup; }
		
		//identifiers=identifier_list
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }
		
		//identifier_list
		public RuleCall getIdentifiersIdentifier_listParserRuleCall_0_0() { return cIdentifiersIdentifier_listParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=parameter_type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//parameter_type
		public RuleCall getTypeParameter_typeParserRuleCall_2_0() { return cTypeParameter_typeParserRuleCall_2_0; }
	}
	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//identifier_list:
		//	names+=ID ("," names+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=ID ("," names+=ID)*
		public Group getGroup() { return cGroup; }
		
		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }
		
		//("," names+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	public class Parameter_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.parameter_type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//parameter_type:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Variable_parameter_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.variable_parameter_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndentifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndentifiersIdentifier_listParserRuleCall_1_0 = (RuleCall)cIndentifiersAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeParameter_typeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//variable_parameter_section:
		//	"var" indentifiers=identifier_list ":" type=parameter_type;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" indentifiers=identifier_list ":" type=parameter_type
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//indentifiers=identifier_list
		public Assignment getIndentifiersAssignment_1() { return cIndentifiersAssignment_1; }
		
		//identifier_list
		public RuleCall getIndentifiersIdentifier_listParserRuleCall_1_0() { return cIndentifiersIdentifier_listParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=parameter_type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//parameter_type
		public RuleCall getTypeParameter_typeParserRuleCall_3_0() { return cTypeParameter_typeParserRuleCall_3_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.number");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberAny_numberParserRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		//number:
		//	number=any_number;
		@Override public ParserRule getRule() { return rule; }
		
		//number=any_number
		public Assignment getNumberAssignment() { return cNumberAssignment; }
		
		//any_number
		public RuleCall getNumberAny_numberParserRuleCall_0() { return cNumberAny_numberParserRuleCall_0; }
	}
	public class Any_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.any_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnsigned_numberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSigned_numberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//any_number:
		//	unsigned_number
		//	| signed_number;
		@Override public ParserRule getRule() { return rule; }
		
		//unsigned_number | signed_number
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsigned_number
		public RuleCall getUnsigned_numberParserRuleCall_0() { return cUnsigned_numberParserRuleCall_0; }
		
		//signed_number
		public RuleCall getSigned_numberParserRuleCall_1() { return cSigned_numberParserRuleCall_1; }
	}
	public class Label_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.label_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_2_1_0 = (RuleCall)cLabelsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//label_declaration:
		//	"label" labels+=label ("," labels+=label)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"label" labels+=label ("," labels+=label)* ";"
		public Group getGroup() { return cGroup; }
		
		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//labels+=label
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }
		
		//label
		public RuleCall getLabelsLabelParserRuleCall_1_0() { return cLabelsLabelParserRuleCall_1_0; }
		
		//("," labels+=label)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//labels+=label
		public Assignment getLabelsAssignment_2_1() { return cLabelsAssignment_2_1; }
		
		//label
		public RuleCall getLabelsLabelParserRuleCall_2_1_0() { return cLabelsLabelParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpteratorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOpteratorADDITION_OPTerminalRuleCall_0_0_0 = (RuleCall)cOpteratorAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Assignment cNumberAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_0_1_1_0 = (RuleCall)cNumberAssignment_0_1_1.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cBoolLiteralAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cBoolLiteralTrueKeyword_2_0 = (Keyword)cBoolLiteralAssignment_2.eContents().get(0);
		private final Assignment cBoolLiteralAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cBoolLiteralFalseKeyword_3_0 = (Keyword)cBoolLiteralAssignment_3.eContents().get(0);
		private final Assignment cNilAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNilNilKeyword_4_0 = (Keyword)cNilAssignment_4.eContents().get(0);
		
		//constant:
		//	opterator=ADDITION_OP? (name=ID | number=number) | string=STRING
		//	| boolLiteral="true"
		//	| boolLiteral="false"
		//	| nil?="nil";
		@Override public ParserRule getRule() { return rule; }
		
		//opterator=ADDITION_OP? (name=ID | number=number) | string=STRING | boolLiteral="true" | boolLiteral="false" | nil?="nil"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//opterator=ADDITION_OP? (name=ID | number=number)
		public Group getGroup_0() { return cGroup_0; }
		
		//opterator=ADDITION_OP?
		public Assignment getOpteratorAssignment_0_0() { return cOpteratorAssignment_0_0; }
		
		//ADDITION_OP
		public RuleCall getOpteratorADDITION_OPTerminalRuleCall_0_0_0() { return cOpteratorADDITION_OPTerminalRuleCall_0_0_0; }
		
		//name=ID | number=number
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }
		
		//number=number
		public Assignment getNumberAssignment_0_1_1() { return cNumberAssignment_0_1_1; }
		
		//number
		public RuleCall getNumberNumberParserRuleCall_0_1_1_0() { return cNumberNumberParserRuleCall_0_1_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//boolLiteral="true"
		public Assignment getBoolLiteralAssignment_2() { return cBoolLiteralAssignment_2; }
		
		//"true"
		public Keyword getBoolLiteralTrueKeyword_2_0() { return cBoolLiteralTrueKeyword_2_0; }
		
		//boolLiteral="false"
		public Assignment getBoolLiteralAssignment_3() { return cBoolLiteralAssignment_3; }
		
		//"false"
		public Keyword getBoolLiteralFalseKeyword_3_0() { return cBoolLiteralFalseKeyword_3_0; }
		
		//nil?="nil"
		public Assignment getNilAssignment_4() { return cNilAssignment_4; }
		
		//"nil"
		public Keyword getNilNilKeyword_4_0() { return cNilNilKeyword_4_0; }
	}
	public class Constant_definition_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.constant_definition_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConstsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstsConstant_definitionParserRuleCall_1_0_0 = (RuleCall)cConstsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//constant_definition_part:
		//	"const" (consts+=constant_definition ";")+;
		@Override public ParserRule getRule() { return rule; }
		
		//"const" (consts+=constant_definition ";")+
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//(consts+=constant_definition ";")+
		public Group getGroup_1() { return cGroup_1; }
		
		//consts+=constant_definition
		public Assignment getConstsAssignment_1_0() { return cConstsAssignment_1_0; }
		
		//constant_definition
		public RuleCall getConstsConstant_definitionParserRuleCall_1_0_0() { return cConstsConstant_definitionParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class Constant_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.constant_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstConstantParserRuleCall_2_0 = (RuleCall)cConstAssignment_2.eContents().get(0);
		
		//constant_definition:
		//	name=ID "=" const=constant;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" const=constant
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//const=constant
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }
		
		//constant
		public RuleCall getConstConstantParserRuleCall_2_0() { return cConstConstantParserRuleCall_2_0; }
	}
	public class Type_definition_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.type_definition_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypesType_definitionParserRuleCall_1_0_0 = (RuleCall)cTypesAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//type_definition_part:
		//	"type" (types+=type_definition ";")+;
		@Override public ParserRule getRule() { return rule; }
		
		//"type" (types+=type_definition ";")+
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//(types+=type_definition ";")+
		public Group getGroup_1() { return cGroup_1; }
		
		//types+=type_definition
		public Assignment getTypesAssignment_1_0() { return cTypesAssignment_1_0; }
		
		//type_definition
		public RuleCall getTypesType_definitionParserRuleCall_1_0_0() { return cTypesType_definitionParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class Type_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.type_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//type_definition:
		//	name=ID "=" type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" type=type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleSimple_typeParserRuleCall_0_0 = (RuleCall)cSimpleAssignment_0.eContents().get(0);
		private final Assignment cStructuredAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructuredStructured_typeParserRuleCall_1_0 = (RuleCall)cStructuredAssignment_1.eContents().get(0);
		
		//type:
		//	simple=simple_type
		//	| structured=structured_type;
		@Override public ParserRule getRule() { return rule; }
		
		//simple=simple_type | structured=structured_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simple=simple_type
		public Assignment getSimpleAssignment_0() { return cSimpleAssignment_0; }
		
		//simple_type
		public RuleCall getSimpleSimple_typeParserRuleCall_0_0() { return cSimpleSimple_typeParserRuleCall_0_0; }
		
		//structured=structured_type
		public Assignment getStructuredAssignment_1() { return cStructuredAssignment_1; }
		
		//structured_type
		public RuleCall getStructuredStructured_typeParserRuleCall_1_0() { return cStructuredStructured_typeParserRuleCall_1_0; }
	}
	public class Simple_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.simple_type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//simple_type:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Structured_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.structured_type");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeUnpacked_structured_typeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//structured_type:
		//	type=unpacked_structured_type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=unpacked_structured_type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//unpacked_structured_type
		public RuleCall getTypeUnpacked_structured_typeParserRuleCall_0() { return cTypeUnpacked_structured_typeParserRuleCall_0; }
	}
	public class Unpacked_structured_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.unpacked_structured_type");
		private final Assignment cRecordAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRecordRecord_typeParserRuleCall_0 = (RuleCall)cRecordAssignment.eContents().get(0);
		
		//unpacked_structured_type:
		//	record=record_type;
		@Override public ParserRule getRule() { return rule; }
		
		//record=record_type
		public Assignment getRecordAssignment() { return cRecordAssignment; }
		
		//record_type
		public RuleCall getRecordRecord_typeParserRuleCall_0() { return cRecordRecord_typeParserRuleCall_0; }
	}
	public class Record_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.record_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecordKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRecordKeywordRecordKeyword_0_0 = (Keyword)cRecordKeywordAssignment_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsField_listParserRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		private final Assignment cEndKeywordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cEndKeywordEndKeyword_2_0 = (Keyword)cEndKeywordAssignment_2.eContents().get(0);
		
		//record_type:
		//	recordKeyword="record" fields=field_list? endKeyword="end";
		@Override public ParserRule getRule() { return rule; }
		
		//recordKeyword="record" fields=field_list? endKeyword="end"
		public Group getGroup() { return cGroup; }
		
		//recordKeyword="record"
		public Assignment getRecordKeywordAssignment_0() { return cRecordKeywordAssignment_0; }
		
		//"record"
		public Keyword getRecordKeywordRecordKeyword_0_0() { return cRecordKeywordRecordKeyword_0_0; }
		
		//fields=field_list?
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }
		
		//field_list
		public RuleCall getFieldsField_listParserRuleCall_1_0() { return cFieldsField_listParserRuleCall_1_0; }
		
		//endKeyword="end"
		public Assignment getEndKeywordAssignment_2() { return cEndKeywordAssignment_2; }
		
		//"end"
		public Keyword getEndKeywordEndKeyword_2_0() { return cEndKeywordEndKeyword_2_0; }
	}
	public class Field_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.field_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSectionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSectionsRecord_sectionParserRuleCall_0_0 = (RuleCall)cSectionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSectionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSectionsRecord_sectionParserRuleCall_1_1_0 = (RuleCall)cSectionsAssignment_1_1.eContents().get(0);
		
		//field_list:
		//	sections+=record_section (";" sections+=record_section)*;
		@Override public ParserRule getRule() { return rule; }
		
		//sections+=record_section (";" sections+=record_section)*
		public Group getGroup() { return cGroup; }
		
		//sections+=record_section
		public Assignment getSectionsAssignment_0() { return cSectionsAssignment_0; }
		
		//record_section
		public RuleCall getSectionsRecord_sectionParserRuleCall_0_0() { return cSectionsRecord_sectionParserRuleCall_0_0; }
		
		//(";" sections+=record_section)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//sections+=record_section
		public Assignment getSectionsAssignment_1_1() { return cSectionsAssignment_1_1; }
		
		//record_section
		public RuleCall getSectionsRecord_sectionParserRuleCall_1_1_0() { return cSectionsRecord_sectionParserRuleCall_1_1_0; }
	}
	public class Record_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.record_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIdentifier_listParserRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//record_section:
		//	identifiers=identifier_list ":" type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifiers=identifier_list ":" type=type
		public Group getGroup() { return cGroup; }
		
		//identifiers=identifier_list
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }
		
		//identifier_list
		public RuleCall getIdentifiersIdentifier_listParserRuleCall_0_0() { return cIdentifiersIdentifier_listParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class Signed_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.signed_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRealSIGNED_REAL_NUMBERTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		
		//signed_number any_number:
		//	integer=SIGNED_INTEGER_NUMBER
		//	| real=SIGNED_REAL_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=SIGNED_INTEGER_NUMBER | real=SIGNED_REAL_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer=SIGNED_INTEGER_NUMBER
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//SIGNED_INTEGER_NUMBER
		public RuleCall getIntegerSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0() { return cIntegerSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0; }
		
		//real=SIGNED_REAL_NUMBER
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//SIGNED_REAL_NUMBER
		public RuleCall getRealSIGNED_REAL_NUMBERTerminalRuleCall_1_0() { return cRealSIGNED_REAL_NUMBERTerminalRuleCall_1_0; }
	}
	public class Unsigned_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.unsigned_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerINTEGER_NUMBERTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRealREAL_NUMBERTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		
		//unsigned_number any_number:
		//	integer=INTEGER_NUMBER
		//	| real=REAL_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=INTEGER_NUMBER | real=REAL_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer=INTEGER_NUMBER
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//INTEGER_NUMBER
		public RuleCall getIntegerINTEGER_NUMBERTerminalRuleCall_0_0() { return cIntegerINTEGER_NUMBERTerminalRuleCall_0_0; }
		
		//real=REAL_NUMBER
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//REAL_NUMBER
		public RuleCall getRealREAL_NUMBERTerminalRuleCall_1_0() { return cRealREAL_NUMBERTerminalRuleCall_1_0; }
	}
	public class Variable_declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.variable_declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSectionsVariable_sectionParserRuleCall_1_0 = (RuleCall)cSectionsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSectionsVariable_sectionParserRuleCall_3_0_0 = (RuleCall)cSectionsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//variable_declaration_part:
		//	"var" sections+=variable_section ";" (sections+=variable_section ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" sections+=variable_section ";" (sections+=variable_section ";")*
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//sections+=variable_section
		public Assignment getSectionsAssignment_1() { return cSectionsAssignment_1; }
		
		//variable_section
		public RuleCall getSectionsVariable_sectionParserRuleCall_1_0() { return cSectionsVariable_sectionParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//(sections+=variable_section ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//sections+=variable_section
		public Assignment getSectionsAssignment_3_0() { return cSectionsAssignment_3_0; }
		
		//variable_section
		public RuleCall getSectionsVariable_sectionParserRuleCall_3_0_0() { return cSectionsVariable_sectionParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class Variable_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.variable_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersVariable_identifier_listParserRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//variable_section:
		//	identifiers=variable_identifier_list ":" type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifiers=variable_identifier_list ":" type=type
		public Group getGroup() { return cGroup; }
		
		//identifiers=variable_identifier_list
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }
		
		//variable_identifier_list
		public RuleCall getIdentifiersVariable_identifier_listParserRuleCall_0_0() { return cIdentifiersVariable_identifier_listParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class Variable_identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.variable_identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//variable_identifier_list:
		//	names+=ID ("," names+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=ID ("," names+=ID)*
		public Group getGroup() { return cGroup; }
		
		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }
		
		//("," names+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	public class While_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.while_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatement_sequenceParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//while_statement:
		//	"while" expression=expression "do" statement=statement_sequence;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" expression=expression "do" statement=statement_sequence
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//statement=statement_sequence
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//statement_sequence
		public RuleCall getStatementStatement_sequenceParserRuleCall_3_0() { return cStatementStatement_sequenceParserRuleCall_3_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final Program_heading_blockElements pProgram_heading_block;
	private final BlockElements pBlock;
	private final Statement_partElements pStatement_part;
	private final Statement_sequenceElements pStatement_sequence;
	private final StatementElements pStatement;
	private final Simple_statementElements pSimple_statement;
	private final Structured_statementElements pStructured_statement;
	private final Compound_statementElements pCompound_statement;
	private final Assignment_statementElements pAssignment_statement;
	private final LabelElements pLabel;
	private final VariableElements pVariable;
	private final Expression_listElements pExpression_list;
	private final ExpressionElements pExpression;
	private final Simple_expressionElements pSimple_expression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final Function_designatorElements pFunction_designator;
	private final Function_procedure_declarationElements pFunction_procedure_declaration;
	private final Function_headingElements pFunction_heading;
	private final Function_declarationElements pFunction_declaration;
	private final Abstraction_declarationElements pAbstraction_declaration;
	private final Abstraction_headingElements pAbstraction_heading;
	private final Procedure_declarationElements pProcedure_declaration;
	private final Procedure_headingElements pProcedure_heading;
	private final Formal_parameter_listElements pFormal_parameter_list;
	private final Formal_parameter_sectionElements pFormal_parameter_section;
	private final Value_parameter_sectionElements pValue_parameter_section;
	private final Identifier_listElements pIdentifier_list;
	private final Parameter_typeElements pParameter_type;
	private final Variable_parameter_sectionElements pVariable_parameter_section;
	private final NumberElements pNumber;
	private final Any_numberElements pAny_number;
	private final Label_declarationElements pLabel_declaration;
	private final ConstantElements pConstant;
	private final Constant_definition_partElements pConstant_definition_part;
	private final Constant_definitionElements pConstant_definition;
	private final Type_definition_partElements pType_definition_part;
	private final Type_definitionElements pType_definition;
	private final TypeElements pType;
	private final Simple_typeElements pSimple_type;
	private final Structured_typeElements pStructured_type;
	private final Unpacked_structured_typeElements pUnpacked_structured_type;
	private final Record_typeElements pRecord_type;
	private final Field_listElements pField_list;
	private final Record_sectionElements pRecord_section;
	private final Signed_numberElements pSigned_number;
	private final Unsigned_numberElements pUnsigned_number;
	private final Variable_declaration_partElements pVariable_declaration_part;
	private final Variable_sectionElements pVariable_section;
	private final Variable_identifier_listElements pVariable_identifier_list;
	private final While_statementElements pWhile_statement;
	private final TerminalRule tADDITION_OP;
	private final TerminalRule tMULTIPLICATION_OP;
	private final TerminalRule tRELATIONAL_OP;
	private final TerminalRule tDIGIT_SEQUENCE;
	private final TerminalRule tSIGNED_INTEGER_NUMBER;
	private final TerminalRule tINTEGER_NUMBER;
	private final TerminalRule tREAL_NUMBER;
	private final TerminalRule tSIGNED_REAL_NUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PascalGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pProgram_heading_block = new Program_heading_blockElements();
		this.pBlock = new BlockElements();
		this.pStatement_part = new Statement_partElements();
		this.pStatement_sequence = new Statement_sequenceElements();
		this.pStatement = new StatementElements();
		this.pSimple_statement = new Simple_statementElements();
		this.pStructured_statement = new Structured_statementElements();
		this.pCompound_statement = new Compound_statementElements();
		this.pAssignment_statement = new Assignment_statementElements();
		this.pLabel = new LabelElements();
		this.pVariable = new VariableElements();
		this.pExpression_list = new Expression_listElements();
		this.pExpression = new ExpressionElements();
		this.pSimple_expression = new Simple_expressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pFunction_designator = new Function_designatorElements();
		this.pFunction_procedure_declaration = new Function_procedure_declarationElements();
		this.pFunction_heading = new Function_headingElements();
		this.pFunction_declaration = new Function_declarationElements();
		this.pAbstraction_declaration = new Abstraction_declarationElements();
		this.pAbstraction_heading = new Abstraction_headingElements();
		this.pProcedure_declaration = new Procedure_declarationElements();
		this.pProcedure_heading = new Procedure_headingElements();
		this.pFormal_parameter_list = new Formal_parameter_listElements();
		this.pFormal_parameter_section = new Formal_parameter_sectionElements();
		this.pValue_parameter_section = new Value_parameter_sectionElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pParameter_type = new Parameter_typeElements();
		this.pVariable_parameter_section = new Variable_parameter_sectionElements();
		this.pNumber = new NumberElements();
		this.pAny_number = new Any_numberElements();
		this.pLabel_declaration = new Label_declarationElements();
		this.pConstant = new ConstantElements();
		this.pConstant_definition_part = new Constant_definition_partElements();
		this.pConstant_definition = new Constant_definitionElements();
		this.pType_definition_part = new Type_definition_partElements();
		this.pType_definition = new Type_definitionElements();
		this.pType = new TypeElements();
		this.pSimple_type = new Simple_typeElements();
		this.pStructured_type = new Structured_typeElements();
		this.pUnpacked_structured_type = new Unpacked_structured_typeElements();
		this.pRecord_type = new Record_typeElements();
		this.pField_list = new Field_listElements();
		this.pRecord_section = new Record_sectionElements();
		this.pSigned_number = new Signed_numberElements();
		this.pUnsigned_number = new Unsigned_numberElements();
		this.pVariable_declaration_part = new Variable_declaration_partElements();
		this.pVariable_section = new Variable_sectionElements();
		this.pVariable_identifier_list = new Variable_identifier_listElements();
		this.pWhile_statement = new While_statementElements();
		this.tADDITION_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.ADDITION_OP");
		this.tMULTIPLICATION_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.MULTIPLICATION_OP");
		this.tRELATIONAL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.RELATIONAL_OP");
		this.tDIGIT_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.DIGIT_SEQUENCE");
		this.tSIGNED_INTEGER_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.SIGNED_INTEGER_NUMBER");
		this.tINTEGER_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.INTEGER_NUMBER");
		this.tREAL_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.REAL_NUMBER");
		this.tSIGNED_REAL_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.pascal.Pascal.SIGNED_REAL_NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.pascal.Pascal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//program:
	//	heading=program_heading_block block=block ".";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//program_heading_block:
	//	"program" name=ID ";";
	public Program_heading_blockElements getProgram_heading_blockAccess() {
		return pProgram_heading_block;
	}
	
	public ParserRule getProgram_heading_blockRule() {
		return getProgram_heading_blockAccess().getRule();
	}
	
	//block:
	//	label=label_declaration?
	//	type=type_definition_part?
	//	variable=variable_declaration_part?
	//	constant=constant_definition_part?
	//	abstraction=function_procedure_declaration?
	//	statement=statement_part;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//statement_part:
	//	"begin" sequence=statement_sequence "end";
	public Statement_partElements getStatement_partAccess() {
		return pStatement_part;
	}
	
	public ParserRule getStatement_partRule() {
		return getStatement_partAccess().getRule();
	}
	
	//statement_sequence:
	//	statements+=statement (";" statements+=statement)*;
	public Statement_sequenceElements getStatement_sequenceAccess() {
		return pStatement_sequence;
	}
	
	public ParserRule getStatement_sequenceRule() {
		return getStatement_sequenceAccess().getRule();
	}
	
	//statement:
	//	(label=label ":")? (simple=simple_statement | structured=structured_statement);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//simple_statement:
	//	{simple_statement} (assignment=assignment_statement | function=function_designator | function_noargs=ID)?;
	public Simple_statementElements getSimple_statementAccess() {
		return pSimple_statement;
	}
	
	public ParserRule getSimple_statementRule() {
		return getSimple_statementAccess().getRule();
	}
	
	//structured_statement:
	//	compound=compound_statement
	//	| while_stmt=while_statement;
	public Structured_statementElements getStructured_statementAccess() {
		return pStructured_statement;
	}
	
	public ParserRule getStructured_statementRule() {
		return getStructured_statementAccess().getRule();
	}
	
	//compound_statement:
	//	"begin" sequence=statement_sequence "end";
	public Compound_statementElements getCompound_statementAccess() {
		return pCompound_statement;
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}
	
	//assignment_statement:
	//	variable=variable ":=" expression=expression;
	public Assignment_statementElements getAssignment_statementAccess() {
		return pAssignment_statement;
	}
	
	public ParserRule getAssignment_statementRule() {
		return getAssignment_statementAccess().getRule();
	}
	
	//label:
	//	number=SIGNED_INTEGER_NUMBER | number=INTEGER_NUMBER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//expression_list:
	//	expressions+=expression ("," expressions+=expression)*;
	public Expression_listElements getExpression_listAccess() {
		return pExpression_list;
	}
	
	public ParserRule getExpression_listRule() {
		return getExpression_listAccess().getRule();
	}
	
	//expression:
	//	expressions+=simple_expression ((operators+=RELATIONAL_OP | operators+="in" | operators+="=")
	//	expressions+=simple_expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//simple_expression:
	//	prefixOperator=ADDITION_OP? terms+=term ((operators+=ADDITION_OP | operators+="or") terms+=term |
	//	terms+=unsigned_number)*;
	public Simple_expressionElements getSimple_expressionAccess() {
		return pSimple_expression;
	}
	
	public ParserRule getSimple_expressionRule() {
		return getSimple_expressionAccess().getRule();
	}
	
	//term:
	//	factors+=factor ((operators+=MULTIPLICATION_OP | operators+="and") factors+=factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//factor:
	//	variable=variable
	//	| number=number
	//	| string=STRING
	//	| boolean="true"
	//	| boolean="false"
	//	| function=function_designator
	//	| "(" expression=expression ")"
	//	| "not" not=factor
	//	| nil?="nil";
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//function_designator:
	//	name=ID "(" expressions=expression_list? ")";
	public Function_designatorElements getFunction_designatorAccess() {
		return pFunction_designator;
	}
	
	public ParserRule getFunction_designatorRule() {
		return getFunction_designatorAccess().getRule();
	}
	
	//function_procedure_declaration:
	//	((functions+=function_declaration | procedures+=procedure_declaration) ";")+;
	public Function_procedure_declarationElements getFunction_procedure_declarationAccess() {
		return pFunction_procedure_declaration;
	}
	
	public ParserRule getFunction_procedure_declarationRule() {
		return getFunction_procedure_declarationAccess().getRule();
	}
	
	//function_heading abstraction_heading:
	//	"function" name=ID parameters=formal_parameter_list? ":" returnType=ID;
	public Function_headingElements getFunction_headingAccess() {
		return pFunction_heading;
	}
	
	public ParserRule getFunction_headingRule() {
		return getFunction_headingAccess().getRule();
	}
	
	//function_declaration abstraction_declaration:
	//	heading=function_heading ";" block=block;
	public Function_declarationElements getFunction_declarationAccess() {
		return pFunction_declaration;
	}
	
	public ParserRule getFunction_declarationRule() {
		return getFunction_declarationAccess().getRule();
	}
	
	//abstraction_declaration:
	//	procedure_declaration | function_declaration;
	public Abstraction_declarationElements getAbstraction_declarationAccess() {
		return pAbstraction_declaration;
	}
	
	public ParserRule getAbstraction_declarationRule() {
		return getAbstraction_declarationAccess().getRule();
	}
	
	//abstraction_heading:
	//	procedure_heading | function_heading;
	public Abstraction_headingElements getAbstraction_headingAccess() {
		return pAbstraction_heading;
	}
	
	public ParserRule getAbstraction_headingRule() {
		return getAbstraction_headingAccess().getRule();
	}
	
	//procedure_declaration abstraction_declaration:
	//	heading=procedure_heading ";" block=block;
	public Procedure_declarationElements getProcedure_declarationAccess() {
		return pProcedure_declaration;
	}
	
	public ParserRule getProcedure_declarationRule() {
		return getProcedure_declarationAccess().getRule();
	}
	
	//procedure_heading abstraction_heading:
	//	"procedure" name=ID parameters=formal_parameter_list?;
	public Procedure_headingElements getProcedure_headingAccess() {
		return pProcedure_heading;
	}
	
	public ParserRule getProcedure_headingRule() {
		return getProcedure_headingAccess().getRule();
	}
	
	//formal_parameter_list:
	//	"(" parameters+=formal_parameter_section (";" parameters+=formal_parameter_section)* ")";
	public Formal_parameter_listElements getFormal_parameter_listAccess() {
		return pFormal_parameter_list;
	}
	
	public ParserRule getFormal_parameter_listRule() {
		return getFormal_parameter_listAccess().getRule();
	}
	
	//formal_parameter_section:
	//	value=value_parameter_section | variable=variable_parameter_section | procedure=procedure_heading |
	//	function=function_heading;
	public Formal_parameter_sectionElements getFormal_parameter_sectionAccess() {
		return pFormal_parameter_section;
	}
	
	public ParserRule getFormal_parameter_sectionRule() {
		return getFormal_parameter_sectionAccess().getRule();
	}
	
	//value_parameter_section:
	//	identifiers=identifier_list ":" type=parameter_type;
	public Value_parameter_sectionElements getValue_parameter_sectionAccess() {
		return pValue_parameter_section;
	}
	
	public ParserRule getValue_parameter_sectionRule() {
		return getValue_parameter_sectionAccess().getRule();
	}
	
	//identifier_list:
	//	names+=ID ("," names+=ID)*;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}
	
	//parameter_type:
	//	name=ID;
	public Parameter_typeElements getParameter_typeAccess() {
		return pParameter_type;
	}
	
	public ParserRule getParameter_typeRule() {
		return getParameter_typeAccess().getRule();
	}
	
	//variable_parameter_section:
	//	"var" indentifiers=identifier_list ":" type=parameter_type;
	public Variable_parameter_sectionElements getVariable_parameter_sectionAccess() {
		return pVariable_parameter_section;
	}
	
	public ParserRule getVariable_parameter_sectionRule() {
		return getVariable_parameter_sectionAccess().getRule();
	}
	
	//number:
	//	number=any_number;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//any_number:
	//	unsigned_number
	//	| signed_number;
	public Any_numberElements getAny_numberAccess() {
		return pAny_number;
	}
	
	public ParserRule getAny_numberRule() {
		return getAny_numberAccess().getRule();
	}
	
	//label_declaration:
	//	"label" labels+=label ("," labels+=label)* ";";
	public Label_declarationElements getLabel_declarationAccess() {
		return pLabel_declaration;
	}
	
	public ParserRule getLabel_declarationRule() {
		return getLabel_declarationAccess().getRule();
	}
	
	//constant:
	//	opterator=ADDITION_OP? (name=ID | number=number) | string=STRING
	//	| boolLiteral="true"
	//	| boolLiteral="false"
	//	| nil?="nil";
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//constant_definition_part:
	//	"const" (consts+=constant_definition ";")+;
	public Constant_definition_partElements getConstant_definition_partAccess() {
		return pConstant_definition_part;
	}
	
	public ParserRule getConstant_definition_partRule() {
		return getConstant_definition_partAccess().getRule();
	}
	
	//constant_definition:
	//	name=ID "=" const=constant;
	public Constant_definitionElements getConstant_definitionAccess() {
		return pConstant_definition;
	}
	
	public ParserRule getConstant_definitionRule() {
		return getConstant_definitionAccess().getRule();
	}
	
	//type_definition_part:
	//	"type" (types+=type_definition ";")+;
	public Type_definition_partElements getType_definition_partAccess() {
		return pType_definition_part;
	}
	
	public ParserRule getType_definition_partRule() {
		return getType_definition_partAccess().getRule();
	}
	
	//type_definition:
	//	name=ID "=" type=type;
	public Type_definitionElements getType_definitionAccess() {
		return pType_definition;
	}
	
	public ParserRule getType_definitionRule() {
		return getType_definitionAccess().getRule();
	}
	
	//type:
	//	simple=simple_type
	//	| structured=structured_type;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//simple_type:
	//	name=ID;
	public Simple_typeElements getSimple_typeAccess() {
		return pSimple_type;
	}
	
	public ParserRule getSimple_typeRule() {
		return getSimple_typeAccess().getRule();
	}
	
	//structured_type:
	//	type=unpacked_structured_type;
	public Structured_typeElements getStructured_typeAccess() {
		return pStructured_type;
	}
	
	public ParserRule getStructured_typeRule() {
		return getStructured_typeAccess().getRule();
	}
	
	//unpacked_structured_type:
	//	record=record_type;
	public Unpacked_structured_typeElements getUnpacked_structured_typeAccess() {
		return pUnpacked_structured_type;
	}
	
	public ParserRule getUnpacked_structured_typeRule() {
		return getUnpacked_structured_typeAccess().getRule();
	}
	
	//record_type:
	//	recordKeyword="record" fields=field_list? endKeyword="end";
	public Record_typeElements getRecord_typeAccess() {
		return pRecord_type;
	}
	
	public ParserRule getRecord_typeRule() {
		return getRecord_typeAccess().getRule();
	}
	
	//field_list:
	//	sections+=record_section (";" sections+=record_section)*;
	public Field_listElements getField_listAccess() {
		return pField_list;
	}
	
	public ParserRule getField_listRule() {
		return getField_listAccess().getRule();
	}
	
	//record_section:
	//	identifiers=identifier_list ":" type=type;
	public Record_sectionElements getRecord_sectionAccess() {
		return pRecord_section;
	}
	
	public ParserRule getRecord_sectionRule() {
		return getRecord_sectionAccess().getRule();
	}
	
	//signed_number any_number:
	//	integer=SIGNED_INTEGER_NUMBER
	//	| real=SIGNED_REAL_NUMBER;
	public Signed_numberElements getSigned_numberAccess() {
		return pSigned_number;
	}
	
	public ParserRule getSigned_numberRule() {
		return getSigned_numberAccess().getRule();
	}
	
	//unsigned_number any_number:
	//	integer=INTEGER_NUMBER
	//	| real=REAL_NUMBER;
	public Unsigned_numberElements getUnsigned_numberAccess() {
		return pUnsigned_number;
	}
	
	public ParserRule getUnsigned_numberRule() {
		return getUnsigned_numberAccess().getRule();
	}
	
	//variable_declaration_part:
	//	"var" sections+=variable_section ";" (sections+=variable_section ";")*;
	public Variable_declaration_partElements getVariable_declaration_partAccess() {
		return pVariable_declaration_part;
	}
	
	public ParserRule getVariable_declaration_partRule() {
		return getVariable_declaration_partAccess().getRule();
	}
	
	//variable_section:
	//	identifiers=variable_identifier_list ":" type=type;
	public Variable_sectionElements getVariable_sectionAccess() {
		return pVariable_section;
	}
	
	public ParserRule getVariable_sectionRule() {
		return getVariable_sectionAccess().getRule();
	}
	
	//variable_identifier_list:
	//	names+=ID ("," names+=ID)*;
	public Variable_identifier_listElements getVariable_identifier_listAccess() {
		return pVariable_identifier_list;
	}
	
	public ParserRule getVariable_identifier_listRule() {
		return getVariable_identifier_listAccess().getRule();
	}
	
	//while_statement:
	//	"while" expression=expression "do" statement=statement_sequence;
	public While_statementElements getWhile_statementAccess() {
		return pWhile_statement;
	}
	
	public ParserRule getWhile_statementRule() {
		return getWhile_statementAccess().getRule();
	}
	
	//terminal ADDITION_OP:
	//	"+" | "-";
	public TerminalRule getADDITION_OPRule() {
		return tADDITION_OP;
	}
	
	//terminal MULTIPLICATION_OP:
	//	"*" | "/";
	public TerminalRule getMULTIPLICATION_OPRule() {
		return tMULTIPLICATION_OP;
	}
	
	//terminal RELATIONAL_OP:
	//	"=" | "<>" | "<" | "<=" | ">" | ">=";
	public TerminalRule getRELATIONAL_OPRule() {
		return tRELATIONAL_OP;
	}
	
	//terminal DIGIT_SEQUENCE:
	//	ADDITION_OP? INTEGER_NUMBER;
	public TerminalRule getDIGIT_SEQUENCERule() {
		return tDIGIT_SEQUENCE;
	}
	
	//terminal SIGNED_INTEGER_NUMBER:
	//	ADDITION_OP INTEGER_NUMBER;
	public TerminalRule getSIGNED_INTEGER_NUMBERRule() {
		return tSIGNED_INTEGER_NUMBER;
	}
	
	//terminal INTEGER_NUMBER:
	//	INT;
	public TerminalRule getINTEGER_NUMBERRule() {
		return tINTEGER_NUMBER;
	}
	
	//terminal REAL_NUMBER:
	//	INTEGER_NUMBER "." INTEGER_NUMBER? (("E" | "e") DIGIT_SEQUENCE)? | INTEGER_NUMBER ("E" | "e") DIGIT_SEQUENCE;
	public TerminalRule getREAL_NUMBERRule() {
		return tREAL_NUMBER;
	}
	
	//terminal SIGNED_REAL_NUMBER:
	//	ADDITION_OP REAL_NUMBER;
	public TerminalRule getSIGNED_REAL_NUMBERRule() {
		return tSIGNED_REAL_NUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
