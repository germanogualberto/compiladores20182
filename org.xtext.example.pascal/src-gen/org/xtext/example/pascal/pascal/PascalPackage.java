/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.pascal.pascal;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.example.pascal.pascal.PascalFactory
 * @model kind="package"
 * @generated
 */
public interface PascalPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "pascal";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/example/pascal/Pascal";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "pascal";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  PascalPackage eINSTANCE = org.xtext.example.pascal.pascal.impl.PascalPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.pascalImpl <em>pascal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.pascalImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getpascal()
   * @generated
   */
  int PASCAL = 0;

  /**
   * The feature id for the '<em><b>Program</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PASCAL__PROGRAM = 0;

  /**
   * The number of structural features of the '<em>pascal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PASCAL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.programImpl <em>program</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.programImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getprogram()
   * @generated
   */
  int PROGRAM = 1;

  /**
   * The feature id for the '<em><b>Heading</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__HEADING = 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__BLOCK = 1;

  /**
   * The number of structural features of the '<em>program</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.program_heading_blockImpl <em>program heading block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.program_heading_blockImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getprogram_heading_block()
   * @generated
   */
  int PROGRAM_HEADING_BLOCK = 2;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK__NAME = 0;

  /**
   * The number of structural features of the '<em>program heading block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.blockImpl <em>block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.blockImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getblock()
   * @generated
   */
  int BLOCK = 3;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__STATEMENT = 0;

  /**
   * The number of structural features of the '<em>block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.statement_partImpl <em>statement part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.statement_partImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getstatement_part()
   * @generated
   */
  int STATEMENT_PART = 4;

  /**
   * The feature id for the '<em><b>Sequence</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_PART__SEQUENCE = 0;

  /**
   * The number of structural features of the '<em>statement part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.statement_sequenceImpl <em>statement sequence</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.statement_sequenceImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getstatement_sequence()
   * @generated
   */
  int STATEMENT_SEQUENCE = 5;

  /**
   * The feature id for the '<em><b>Statements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_SEQUENCE__STATEMENTS = 0;

  /**
   * The number of structural features of the '<em>statement sequence</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_SEQUENCE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.statementImpl <em>statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.statementImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getstatement()
   * @generated
   */
  int STATEMENT = 6;

  /**
   * The feature id for the '<em><b>Label</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT__LABEL = 0;

  /**
   * The feature id for the '<em><b>Simple</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT__SIMPLE = 1;

  /**
   * The number of structural features of the '<em>statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.simple_statementImpl <em>simple statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.simple_statementImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getsimple_statement()
   * @generated
   */
  int SIMPLE_STATEMENT = 7;

  /**
   * The feature id for the '<em><b>Assignment</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__ASSIGNMENT = 0;

  /**
   * The feature id for the '<em><b>Function</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__FUNCTION = 1;

  /**
   * The feature id for the '<em><b>Function noargs</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__FUNCTION_NOARGS = 2;

  /**
   * The number of structural features of the '<em>simple statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.assignment_statementImpl <em>assignment statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.assignment_statementImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getassignment_statement()
   * @generated
   */
  int ASSIGNMENT_STATEMENT = 8;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT__VARIABLE = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT__EXPRESSION = 1;

  /**
   * The number of structural features of the '<em>assignment statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.labelImpl <em>label</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.labelImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getlabel()
   * @generated
   */
  int LABEL = 9;

  /**
   * The feature id for the '<em><b>Number</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL__NUMBER = 0;

  /**
   * The number of structural features of the '<em>label</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.variableImpl <em>variable</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.variableImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getvariable()
   * @generated
   */
  int VARIABLE = 10;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__NAME = 0;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__VARIABLE = 1;

  /**
   * The number of structural features of the '<em>variable</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.var_Impl <em>var </em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.var_Impl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getvar_()
   * @generated
   */
  int VAR_ = 11;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR___EXPRESSIONS = 0;

  /**
   * The feature id for the '<em><b>Array</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR___ARRAY = 1;

  /**
   * The feature id for the '<em><b>Accessor</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR___ACCESSOR = 2;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR___NAME = 3;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR___VARIABLE = 4;

  /**
   * The feature id for the '<em><b>Pointer</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR___POINTER = 5;

  /**
   * The number of structural features of the '<em>var </em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR__FEATURE_COUNT = 6;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.expression_listImpl <em>expression list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.expression_listImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getexpression_list()
   * @generated
   */
  int EXPRESSION_LIST = 12;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST__EXPRESSIONS = 0;

  /**
   * The number of structural features of the '<em>expression list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.expressionImpl <em>expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.expressionImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getexpression()
   * @generated
   */
  int EXPRESSION = 13;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__EXPRESSIONS = 0;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__OPERATORS = 1;

  /**
   * The number of structural features of the '<em>expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.simple_expressionImpl <em>simple expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.simple_expressionImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getsimple_expression()
   * @generated
   */
  int SIMPLE_EXPRESSION = 14;

  /**
   * The feature id for the '<em><b>Prefix Operator</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__PREFIX_OPERATOR = 0;

  /**
   * The feature id for the '<em><b>Terms</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__TERMS = 1;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__OPERATORS = 2;

  /**
   * The number of structural features of the '<em>simple expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.termImpl <em>term</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.termImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getterm()
   * @generated
   */
  int TERM = 15;

  /**
   * The feature id for the '<em><b>Factors</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__FACTORS = 0;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__OPERATORS = 1;

  /**
   * The number of structural features of the '<em>term</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.factorImpl <em>factor</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.factorImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getfactor()
   * @generated
   */
  int FACTOR = 16;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__VARIABLE = 0;

  /**
   * The feature id for the '<em><b>Number</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__NUMBER = 1;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__STRING = 2;

  /**
   * The feature id for the '<em><b>Set</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__SET = 3;

  /**
   * The feature id for the '<em><b>Nil</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__NIL = 4;

  /**
   * The feature id for the '<em><b>Boolean</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__BOOLEAN = 5;

  /**
   * The feature id for the '<em><b>Function</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__FUNCTION = 6;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__EXPRESSION = 7;

  /**
   * The feature id for the '<em><b>Not</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__NOT = 8;

  /**
   * The number of structural features of the '<em>factor</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR_FEATURE_COUNT = 9;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.function_designatorImpl <em>function designator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.function_designatorImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getfunction_designator()
   * @generated
   */
  int FUNCTION_DESIGNATOR = 17;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__NAME = 0;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__EXPRESSIONS = 1;

  /**
   * The number of structural features of the '<em>function designator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.setImpl <em>set</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.setImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getset()
   * @generated
   */
  int SET = 18;

  /**
   * The feature id for the '<em><b>Brackets</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SET__BRACKETS = 0;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SET__EXPRESSIONS = 1;

  /**
   * The number of structural features of the '<em>set</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SET_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.numberImpl <em>number</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.numberImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getnumber()
   * @generated
   */
  int NUMBER = 19;

  /**
   * The feature id for the '<em><b>Number</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUMBER__NUMBER = 0;

  /**
   * The number of structural features of the '<em>number</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUMBER_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.pascal.pascal.impl.any_numberImpl <em>any number</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.pascal.pascal.impl.any_numberImpl
   * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getany_number()
   * @generated
   */
  int ANY_NUMBER = 20;

  /**
   * The feature id for the '<em><b>Integer</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ANY_NUMBER__INTEGER = 0;

  /**
   * The feature id for the '<em><b>Real</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ANY_NUMBER__REAL = 1;

  /**
   * The number of structural features of the '<em>any number</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ANY_NUMBER_FEATURE_COUNT = 2;


  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.pascal <em>pascal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>pascal</em>'.
   * @see org.xtext.example.pascal.pascal.pascal
   * @generated
   */
  EClass getpascal();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.pascal.pascal.pascal#getProgram <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Program</em>'.
   * @see org.xtext.example.pascal.pascal.pascal#getProgram()
   * @see #getpascal()
   * @generated
   */
  EReference getpascal_Program();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.program <em>program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program</em>'.
   * @see org.xtext.example.pascal.pascal.program
   * @generated
   */
  EClass getprogram();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.program#getHeading <em>Heading</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Heading</em>'.
   * @see org.xtext.example.pascal.pascal.program#getHeading()
   * @see #getprogram()
   * @generated
   */
  EReference getprogram_Heading();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.program#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.example.pascal.pascal.program#getBlock()
   * @see #getprogram()
   * @generated
   */
  EReference getprogram_Block();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.program_heading_block <em>program heading block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program heading block</em>'.
   * @see org.xtext.example.pascal.pascal.program_heading_block
   * @generated
   */
  EClass getprogram_heading_block();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.program_heading_block#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.pascal.pascal.program_heading_block#getName()
   * @see #getprogram_heading_block()
   * @generated
   */
  EAttribute getprogram_heading_block_Name();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.block <em>block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>block</em>'.
   * @see org.xtext.example.pascal.pascal.block
   * @generated
   */
  EClass getblock();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.block#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Statement</em>'.
   * @see org.xtext.example.pascal.pascal.block#getStatement()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.statement_part <em>statement part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statement part</em>'.
   * @see org.xtext.example.pascal.pascal.statement_part
   * @generated
   */
  EClass getstatement_part();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.statement_part#getSequence <em>Sequence</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Sequence</em>'.
   * @see org.xtext.example.pascal.pascal.statement_part#getSequence()
   * @see #getstatement_part()
   * @generated
   */
  EReference getstatement_part_Sequence();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.statement_sequence <em>statement sequence</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statement sequence</em>'.
   * @see org.xtext.example.pascal.pascal.statement_sequence
   * @generated
   */
  EClass getstatement_sequence();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.pascal.pascal.statement_sequence#getStatements <em>Statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Statements</em>'.
   * @see org.xtext.example.pascal.pascal.statement_sequence#getStatements()
   * @see #getstatement_sequence()
   * @generated
   */
  EReference getstatement_sequence_Statements();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.statement <em>statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statement</em>'.
   * @see org.xtext.example.pascal.pascal.statement
   * @generated
   */
  EClass getstatement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.statement#getLabel <em>Label</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Label</em>'.
   * @see org.xtext.example.pascal.pascal.statement#getLabel()
   * @see #getstatement()
   * @generated
   */
  EReference getstatement_Label();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.statement#getSimple <em>Simple</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Simple</em>'.
   * @see org.xtext.example.pascal.pascal.statement#getSimple()
   * @see #getstatement()
   * @generated
   */
  EReference getstatement_Simple();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.simple_statement <em>simple statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple statement</em>'.
   * @see org.xtext.example.pascal.pascal.simple_statement
   * @generated
   */
  EClass getsimple_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.simple_statement#getAssignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Assignment</em>'.
   * @see org.xtext.example.pascal.pascal.simple_statement#getAssignment()
   * @see #getsimple_statement()
   * @generated
   */
  EReference getsimple_statement_Assignment();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.simple_statement#getFunction <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Function</em>'.
   * @see org.xtext.example.pascal.pascal.simple_statement#getFunction()
   * @see #getsimple_statement()
   * @generated
   */
  EReference getsimple_statement_Function();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.simple_statement#getFunction_noargs <em>Function noargs</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Function noargs</em>'.
   * @see org.xtext.example.pascal.pascal.simple_statement#getFunction_noargs()
   * @see #getsimple_statement()
   * @generated
   */
  EAttribute getsimple_statement_Function_noargs();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.assignment_statement <em>assignment statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>assignment statement</em>'.
   * @see org.xtext.example.pascal.pascal.assignment_statement
   * @generated
   */
  EClass getassignment_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.assignment_statement#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.example.pascal.pascal.assignment_statement#getVariable()
   * @see #getassignment_statement()
   * @generated
   */
  EReference getassignment_statement_Variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.assignment_statement#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.example.pascal.pascal.assignment_statement#getExpression()
   * @see #getassignment_statement()
   * @generated
   */
  EReference getassignment_statement_Expression();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.label <em>label</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>label</em>'.
   * @see org.xtext.example.pascal.pascal.label
   * @generated
   */
  EClass getlabel();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.label#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Number</em>'.
   * @see org.xtext.example.pascal.pascal.label#getNumber()
   * @see #getlabel()
   * @generated
   */
  EAttribute getlabel_Number();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.variable <em>variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable</em>'.
   * @see org.xtext.example.pascal.pascal.variable
   * @generated
   */
  EClass getvariable();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.variable#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.pascal.pascal.variable#getName()
   * @see #getvariable()
   * @generated
   */
  EAttribute getvariable_Name();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.variable#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.example.pascal.pascal.variable#getVariable()
   * @see #getvariable()
   * @generated
   */
  EReference getvariable_Variable();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.var_ <em>var </em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>var </em>'.
   * @see org.xtext.example.pascal.pascal.var_
   * @generated
   */
  EClass getvar_();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.var_#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expressions</em>'.
   * @see org.xtext.example.pascal.pascal.var_#getExpressions()
   * @see #getvar_()
   * @generated
   */
  EReference getvar__Expressions();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.var_#getArray <em>Array</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Array</em>'.
   * @see org.xtext.example.pascal.pascal.var_#getArray()
   * @see #getvar_()
   * @generated
   */
  EReference getvar__Array();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.var_#isAccessor <em>Accessor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Accessor</em>'.
   * @see org.xtext.example.pascal.pascal.var_#isAccessor()
   * @see #getvar_()
   * @generated
   */
  EAttribute getvar__Accessor();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.var_#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.pascal.pascal.var_#getName()
   * @see #getvar_()
   * @generated
   */
  EAttribute getvar__Name();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.var_#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.example.pascal.pascal.var_#getVariable()
   * @see #getvar_()
   * @generated
   */
  EReference getvar__Variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.var_#getPointer <em>Pointer</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Pointer</em>'.
   * @see org.xtext.example.pascal.pascal.var_#getPointer()
   * @see #getvar_()
   * @generated
   */
  EReference getvar__Pointer();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.expression_list <em>expression list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>expression list</em>'.
   * @see org.xtext.example.pascal.pascal.expression_list
   * @generated
   */
  EClass getexpression_list();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.pascal.pascal.expression_list#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expressions</em>'.
   * @see org.xtext.example.pascal.pascal.expression_list#getExpressions()
   * @see #getexpression_list()
   * @generated
   */
  EReference getexpression_list_Expressions();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.expression <em>expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>expression</em>'.
   * @see org.xtext.example.pascal.pascal.expression
   * @generated
   */
  EClass getexpression();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.pascal.pascal.expression#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expressions</em>'.
   * @see org.xtext.example.pascal.pascal.expression#getExpressions()
   * @see #getexpression()
   * @generated
   */
  EReference getexpression_Expressions();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.example.pascal.pascal.expression#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.example.pascal.pascal.expression#getOperators()
   * @see #getexpression()
   * @generated
   */
  EAttribute getexpression_Operators();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.simple_expression <em>simple expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple expression</em>'.
   * @see org.xtext.example.pascal.pascal.simple_expression
   * @generated
   */
  EClass getsimple_expression();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.simple_expression#getPrefixOperator <em>Prefix Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Prefix Operator</em>'.
   * @see org.xtext.example.pascal.pascal.simple_expression#getPrefixOperator()
   * @see #getsimple_expression()
   * @generated
   */
  EAttribute getsimple_expression_PrefixOperator();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.pascal.pascal.simple_expression#getTerms <em>Terms</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Terms</em>'.
   * @see org.xtext.example.pascal.pascal.simple_expression#getTerms()
   * @see #getsimple_expression()
   * @generated
   */
  EReference getsimple_expression_Terms();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.example.pascal.pascal.simple_expression#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.example.pascal.pascal.simple_expression#getOperators()
   * @see #getsimple_expression()
   * @generated
   */
  EAttribute getsimple_expression_Operators();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.term <em>term</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>term</em>'.
   * @see org.xtext.example.pascal.pascal.term
   * @generated
   */
  EClass getterm();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.pascal.pascal.term#getFactors <em>Factors</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Factors</em>'.
   * @see org.xtext.example.pascal.pascal.term#getFactors()
   * @see #getterm()
   * @generated
   */
  EReference getterm_Factors();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.example.pascal.pascal.term#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.example.pascal.pascal.term#getOperators()
   * @see #getterm()
   * @generated
   */
  EAttribute getterm_Operators();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.factor <em>factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>factor</em>'.
   * @see org.xtext.example.pascal.pascal.factor
   * @generated
   */
  EClass getfactor();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.factor#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getVariable()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.factor#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Number</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getNumber()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Number();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.factor#getString <em>String</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>String</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getString()
   * @see #getfactor()
   * @generated
   */
  EAttribute getfactor_String();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.factor#getSet <em>Set</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Set</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getSet()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Set();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.factor#isNil <em>Nil</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Nil</em>'.
   * @see org.xtext.example.pascal.pascal.factor#isNil()
   * @see #getfactor()
   * @generated
   */
  EAttribute getfactor_Nil();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.factor#getBoolean <em>Boolean</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Boolean</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getBoolean()
   * @see #getfactor()
   * @generated
   */
  EAttribute getfactor_Boolean();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.factor#getFunction <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Function</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getFunction()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Function();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.factor#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getExpression()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Expression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.factor#getNot <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Not</em>'.
   * @see org.xtext.example.pascal.pascal.factor#getNot()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Not();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.function_designator <em>function designator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function designator</em>'.
   * @see org.xtext.example.pascal.pascal.function_designator
   * @generated
   */
  EClass getfunction_designator();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.function_designator#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.pascal.pascal.function_designator#getName()
   * @see #getfunction_designator()
   * @generated
   */
  EAttribute getfunction_designator_Name();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.function_designator#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expressions</em>'.
   * @see org.xtext.example.pascal.pascal.function_designator#getExpressions()
   * @see #getfunction_designator()
   * @generated
   */
  EReference getfunction_designator_Expressions();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.set <em>set</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>set</em>'.
   * @see org.xtext.example.pascal.pascal.set
   * @generated
   */
  EClass getset();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.example.pascal.pascal.set#getBrackets <em>Brackets</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Brackets</em>'.
   * @see org.xtext.example.pascal.pascal.set#getBrackets()
   * @see #getset()
   * @generated
   */
  EAttribute getset_Brackets();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.set#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expressions</em>'.
   * @see org.xtext.example.pascal.pascal.set#getExpressions()
   * @see #getset()
   * @generated
   */
  EReference getset_Expressions();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.number <em>number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>number</em>'.
   * @see org.xtext.example.pascal.pascal.number
   * @generated
   */
  EClass getnumber();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.pascal.pascal.number#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Number</em>'.
   * @see org.xtext.example.pascal.pascal.number#getNumber()
   * @see #getnumber()
   * @generated
   */
  EReference getnumber_Number();

  /**
   * Returns the meta object for class '{@link org.xtext.example.pascal.pascal.any_number <em>any number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>any number</em>'.
   * @see org.xtext.example.pascal.pascal.any_number
   * @generated
   */
  EClass getany_number();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.any_number#getInteger <em>Integer</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Integer</em>'.
   * @see org.xtext.example.pascal.pascal.any_number#getInteger()
   * @see #getany_number()
   * @generated
   */
  EAttribute getany_number_Integer();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.pascal.pascal.any_number#getReal <em>Real</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Real</em>'.
   * @see org.xtext.example.pascal.pascal.any_number#getReal()
   * @see #getany_number()
   * @generated
   */
  EAttribute getany_number_Real();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  PascalFactory getPascalFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.pascalImpl <em>pascal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.pascalImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getpascal()
     * @generated
     */
    EClass PASCAL = eINSTANCE.getpascal();

    /**
     * The meta object literal for the '<em><b>Program</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PASCAL__PROGRAM = eINSTANCE.getpascal_Program();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.programImpl <em>program</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.programImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getprogram()
     * @generated
     */
    EClass PROGRAM = eINSTANCE.getprogram();

    /**
     * The meta object literal for the '<em><b>Heading</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__HEADING = eINSTANCE.getprogram_Heading();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__BLOCK = eINSTANCE.getprogram_Block();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.program_heading_blockImpl <em>program heading block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.program_heading_blockImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getprogram_heading_block()
     * @generated
     */
    EClass PROGRAM_HEADING_BLOCK = eINSTANCE.getprogram_heading_block();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROGRAM_HEADING_BLOCK__NAME = eINSTANCE.getprogram_heading_block_Name();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.blockImpl <em>block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.blockImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getblock()
     * @generated
     */
    EClass BLOCK = eINSTANCE.getblock();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__STATEMENT = eINSTANCE.getblock_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.statement_partImpl <em>statement part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.statement_partImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getstatement_part()
     * @generated
     */
    EClass STATEMENT_PART = eINSTANCE.getstatement_part();

    /**
     * The meta object literal for the '<em><b>Sequence</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT_PART__SEQUENCE = eINSTANCE.getstatement_part_Sequence();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.statement_sequenceImpl <em>statement sequence</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.statement_sequenceImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getstatement_sequence()
     * @generated
     */
    EClass STATEMENT_SEQUENCE = eINSTANCE.getstatement_sequence();

    /**
     * The meta object literal for the '<em><b>Statements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT_SEQUENCE__STATEMENTS = eINSTANCE.getstatement_sequence_Statements();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.statementImpl <em>statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.statementImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getstatement()
     * @generated
     */
    EClass STATEMENT = eINSTANCE.getstatement();

    /**
     * The meta object literal for the '<em><b>Label</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT__LABEL = eINSTANCE.getstatement_Label();

    /**
     * The meta object literal for the '<em><b>Simple</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT__SIMPLE = eINSTANCE.getstatement_Simple();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.simple_statementImpl <em>simple statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.simple_statementImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getsimple_statement()
     * @generated
     */
    EClass SIMPLE_STATEMENT = eINSTANCE.getsimple_statement();

    /**
     * The meta object literal for the '<em><b>Assignment</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_STATEMENT__ASSIGNMENT = eINSTANCE.getsimple_statement_Assignment();

    /**
     * The meta object literal for the '<em><b>Function</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_STATEMENT__FUNCTION = eINSTANCE.getsimple_statement_Function();

    /**
     * The meta object literal for the '<em><b>Function noargs</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIMPLE_STATEMENT__FUNCTION_NOARGS = eINSTANCE.getsimple_statement_Function_noargs();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.assignment_statementImpl <em>assignment statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.assignment_statementImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getassignment_statement()
     * @generated
     */
    EClass ASSIGNMENT_STATEMENT = eINSTANCE.getassignment_statement();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ASSIGNMENT_STATEMENT__VARIABLE = eINSTANCE.getassignment_statement_Variable();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ASSIGNMENT_STATEMENT__EXPRESSION = eINSTANCE.getassignment_statement_Expression();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.labelImpl <em>label</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.labelImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getlabel()
     * @generated
     */
    EClass LABEL = eINSTANCE.getlabel();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute LABEL__NUMBER = eINSTANCE.getlabel_Number();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.variableImpl <em>variable</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.variableImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getvariable()
     * @generated
     */
    EClass VARIABLE = eINSTANCE.getvariable();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VARIABLE__NAME = eINSTANCE.getvariable_Name();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE__VARIABLE = eINSTANCE.getvariable_Variable();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.var_Impl <em>var </em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.var_Impl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getvar_()
     * @generated
     */
    EClass VAR_ = eINSTANCE.getvar_();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR___EXPRESSIONS = eINSTANCE.getvar__Expressions();

    /**
     * The meta object literal for the '<em><b>Array</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR___ARRAY = eINSTANCE.getvar__Array();

    /**
     * The meta object literal for the '<em><b>Accessor</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VAR___ACCESSOR = eINSTANCE.getvar__Accessor();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VAR___NAME = eINSTANCE.getvar__Name();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR___VARIABLE = eINSTANCE.getvar__Variable();

    /**
     * The meta object literal for the '<em><b>Pointer</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR___POINTER = eINSTANCE.getvar__Pointer();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.expression_listImpl <em>expression list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.expression_listImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getexpression_list()
     * @generated
     */
    EClass EXPRESSION_LIST = eINSTANCE.getexpression_list();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION_LIST__EXPRESSIONS = eINSTANCE.getexpression_list_Expressions();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.expressionImpl <em>expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.expressionImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getexpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getexpression();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__EXPRESSIONS = eINSTANCE.getexpression_Expressions();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPRESSION__OPERATORS = eINSTANCE.getexpression_Operators();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.simple_expressionImpl <em>simple expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.simple_expressionImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getsimple_expression()
     * @generated
     */
    EClass SIMPLE_EXPRESSION = eINSTANCE.getsimple_expression();

    /**
     * The meta object literal for the '<em><b>Prefix Operator</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIMPLE_EXPRESSION__PREFIX_OPERATOR = eINSTANCE.getsimple_expression_PrefixOperator();

    /**
     * The meta object literal for the '<em><b>Terms</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_EXPRESSION__TERMS = eINSTANCE.getsimple_expression_Terms();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIMPLE_EXPRESSION__OPERATORS = eINSTANCE.getsimple_expression_Operators();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.termImpl <em>term</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.termImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getterm()
     * @generated
     */
    EClass TERM = eINSTANCE.getterm();

    /**
     * The meta object literal for the '<em><b>Factors</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TERM__FACTORS = eINSTANCE.getterm_Factors();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TERM__OPERATORS = eINSTANCE.getterm_Operators();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.factorImpl <em>factor</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.factorImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getfactor()
     * @generated
     */
    EClass FACTOR = eINSTANCE.getfactor();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__VARIABLE = eINSTANCE.getfactor_Variable();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__NUMBER = eINSTANCE.getfactor_Number();

    /**
     * The meta object literal for the '<em><b>String</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FACTOR__STRING = eINSTANCE.getfactor_String();

    /**
     * The meta object literal for the '<em><b>Set</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__SET = eINSTANCE.getfactor_Set();

    /**
     * The meta object literal for the '<em><b>Nil</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FACTOR__NIL = eINSTANCE.getfactor_Nil();

    /**
     * The meta object literal for the '<em><b>Boolean</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FACTOR__BOOLEAN = eINSTANCE.getfactor_Boolean();

    /**
     * The meta object literal for the '<em><b>Function</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__FUNCTION = eINSTANCE.getfactor_Function();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__EXPRESSION = eINSTANCE.getfactor_Expression();

    /**
     * The meta object literal for the '<em><b>Not</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__NOT = eINSTANCE.getfactor_Not();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.function_designatorImpl <em>function designator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.function_designatorImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getfunction_designator()
     * @generated
     */
    EClass FUNCTION_DESIGNATOR = eINSTANCE.getfunction_designator();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FUNCTION_DESIGNATOR__NAME = eINSTANCE.getfunction_designator_Name();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DESIGNATOR__EXPRESSIONS = eINSTANCE.getfunction_designator_Expressions();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.setImpl <em>set</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.setImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getset()
     * @generated
     */
    EClass SET = eINSTANCE.getset();

    /**
     * The meta object literal for the '<em><b>Brackets</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SET__BRACKETS = eINSTANCE.getset_Brackets();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SET__EXPRESSIONS = eINSTANCE.getset_Expressions();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.numberImpl <em>number</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.numberImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getnumber()
     * @generated
     */
    EClass NUMBER = eINSTANCE.getnumber();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference NUMBER__NUMBER = eINSTANCE.getnumber_Number();

    /**
     * The meta object literal for the '{@link org.xtext.example.pascal.pascal.impl.any_numberImpl <em>any number</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.pascal.pascal.impl.any_numberImpl
     * @see org.xtext.example.pascal.pascal.impl.PascalPackageImpl#getany_number()
     * @generated
     */
    EClass ANY_NUMBER = eINSTANCE.getany_number();

    /**
     * The meta object literal for the '<em><b>Integer</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ANY_NUMBER__INTEGER = eINSTANCE.getany_number_Integer();

    /**
     * The meta object literal for the '<em><b>Real</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ANY_NUMBER__REAL = eINSTANCE.getany_number_Real();

  }

} //PascalPackage
