/*
 * generated by Xtext 2.15.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.pascal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "pascal";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulepascal
entryRulepascal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	iv_rulepascal=rulepascal
	{ $current=$iv_rulepascal.current; }
	EOF;

// Rule pascal
rulepascal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0());
			}
			lv_program_0_0=ruleprogram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPascalRule());
				}
				add(
					$current,
					"program",
					lv_program_0_0,
					"org.xtext.example.pascal.Pascal.program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getHeadingProgram_heading_blockParserRuleCall_0_0());
				}
				lv_heading_0_0=ruleprogram_heading_block
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"heading",
						lv_heading_0_0,
						"org.xtext.example.pascal.Pascal.program_heading_block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"org.xtext.example.pascal.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgram_heading_blockRule()); }
	iv_ruleprogram_heading_block=ruleprogram_heading_block
	{ $current=$iv_ruleprogram_heading_block.current; }
	EOF;

// Rule program_heading_block
ruleprogram_heading_block returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgram_heading_blockAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgram_heading_blockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getLabelLabel_declarationParserRuleCall_0_0());
				}
				lv_label_0_0=rulelabel_declaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"label",
						lv_label_0_0,
						"org.xtext.example.pascal.Pascal.label_declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getTypeType_definition_partParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype_definition_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.example.pascal.Pascal.type_definition_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getVariableVariable_declaration_partParserRuleCall_2_0());
				}
				lv_variable_2_0=rulevariable_declaration_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"org.xtext.example.pascal.Pascal.variable_declaration_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getConstantConstant_definition_partParserRuleCall_3_0());
				}
				lv_constant_3_0=ruleconstant_definition_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"constant",
						lv_constant_3_0,
						"org.xtext.example.pascal.Pascal.constant_definition_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getAbstractionFunction_procedure_declarationParserRuleCall_4_0());
				}
				lv_abstraction_4_0=rulefunction_procedure_declaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"abstraction",
						lv_abstraction_4_0,
						"org.xtext.example.pascal.Pascal.function_procedure_declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementStatement_partParserRuleCall_5_0());
				}
				lv_statement_5_0=rulestatement_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"statement",
						lv_statement_5_0,
						"org.xtext.example.pascal.Pascal.statement_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestatement_part
entryRulestatement_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); }
	iv_rulestatement_part=rulestatement_part
	{ $current=$iv_rulestatement_part.current; }
	EOF;

// Rule statement_part
rulestatement_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getStatement_partAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatement_partAccess().getSequenceStatement_sequenceParserRuleCall_1_0());
				}
				lv_sequence_1_0=rulestatement_sequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatement_partRule());
					}
					set(
						$current,
						"sequence",
						lv_sequence_1_0,
						"org.xtext.example.pascal.Pascal.statement_sequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getStatement_partAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); }
	iv_rulestatement_sequence=rulestatement_sequence
	{ $current=$iv_rulestatement_sequence.current; }
	EOF;

// Rule statement_sequence
rulestatement_sequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementsStatementParserRuleCall_0_0());
				}
				lv_statements_0_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatement_sequenceRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementsStatementParserRuleCall_1_1_0());
					}
					lv_statements_2_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatement_sequenceRule());
						}
						add(
							$current,
							"statements",
							lv_statements_2_0,
							"org.xtext.example.pascal.Pascal.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getLabelLabelParserRuleCall_0_0_0());
					}
					lv_label_0_0=rulelabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"label",
							lv_label_0_0,
							"org.xtext.example.pascal.Pascal.label");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSimpleSimple_statementParserRuleCall_1_0());
				}
				lv_simple_2_0=rulesimple_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"simple",
						lv_simple_2_0,
						"org.xtext.example.pascal.Pascal.simple_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); }
	iv_rulesimple_statement=rulesimple_statement
	{ $current=$iv_rulesimple_statement.current; }
	EOF;

// Rule simple_statement
rulesimple_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_statementAccess().getAssignmentAssignment_statementParserRuleCall_0_0());
				}
				lv_assignment_0_0=ruleassignment_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_0_0,
						"org.xtext.example.pascal.Pascal.assignment_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_statementAccess().getFunctionFunction_designatorParserRuleCall_1_0());
				}
				lv_function_1_0=rulefunction_designator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
					}
					set(
						$current,
						"function",
						lv_function_1_0,
						"org.xtext.example.pascal.Pascal.function_designator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_function_noargs_2_0=RULE_ID
				{
					newLeafNode(lv_function_noargs_2_0, grammarAccess.getSimple_statementAccess().getFunction_noargsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimple_statementRule());
					}
					setWithLastConsumed(
						$current,
						"function_noargs",
						lv_function_noargs_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)?
;

// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); }
	iv_ruleassignment_statement=ruleassignment_statement
	{ $current=$iv_ruleassignment_statement.current; }
	EOF;

// Rule assignment_statement
ruleassignment_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignment_statementAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.example.pascal.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignment_statementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulelabel
entryRulelabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_rulelabel=rulelabel
	{ $current=$iv_rulelabel.current; }
	EOF;

// Rule label
rulelabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_number_0_0=RULE_SIGNED_INTEGER_NUMBER
				{
					newLeafNode(lv_number_0_0, grammarAccess.getLabelAccess().getNumberSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_0_0,
						"org.xtext.example.pascal.Pascal.SIGNED_INTEGER_NUMBER");
				}
			)
		)
		    |
		(
			(
				lv_number_1_0=RULE_INTEGER_NUMBER
				{
					newLeafNode(lv_number_1_0, grammarAccess.getLabelAccess().getNumberINTEGER_NUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.xtext.example.pascal.Pascal.INTEGER_NUMBER");
				}
			)
		)
	)
;

// Entry rule entryRulevariable
entryRulevariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_rulevariable=rulevariable
	{ $current=$iv_rulevariable.current; }
	EOF;

// Rule variable
rulevariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getVariableVar_ParserRuleCall_1_0());
				}
				lv_variable_1_0=rulevar_
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtext.example.pascal.Pascal.var_");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevar_
entryRulevar_ returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_Rule()); }
	iv_rulevar_=rulevar_
	{ $current=$iv_rulevar_.current; }
	EOF;

// Rule var_
rulevar_ returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getVar_Access().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Access().getExpressionsExpression_listParserRuleCall_0_1_0());
					}
					lv_expressions_1_0=ruleexpression_list
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Rule());
						}
						set(
							$current,
							"expressions",
							lv_expressions_1_0,
							"org.xtext.example.pascal.Pascal.expression_list");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getVar_Access().getRightSquareBracketKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Access().getArrayVar_ParserRuleCall_0_3_0());
					}
					lv_array_3_0=rulevar_
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Rule());
						}
						set(
							$current,
							"array",
							lv_array_3_0,
							"org.xtext.example.pascal.Pascal.var_");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_accessor_4_0='.'
					{
						newLeafNode(lv_accessor_4_0, grammarAccess.getVar_Access().getAccessorFullStopKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVar_Rule());
						}
						setWithLastConsumed($current, "accessor", true, ".");
					}
				)
			)
			(
				(
					lv_name_5_0=RULE_ID
					{
						newLeafNode(lv_name_5_0, grammarAccess.getVar_Access().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVar_Rule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Access().getVariableVar_ParserRuleCall_1_2_0());
					}
					lv_variable_6_0=rulevar_
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Rule());
						}
						set(
							$current,
							"variable",
							lv_variable_6_0,
							"org.xtext.example.pascal.Pascal.var_");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_7='^'
			{
				newLeafNode(otherlv_7, grammarAccess.getVar_Access().getCircumflexAccentKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Access().getPointerVar_ParserRuleCall_2_1_0());
					}
					lv_pointer_8_0=rulevar_
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Rule());
						}
						set(
							$current,
							"pointer",
							lv_pointer_8_0,
							"org.xtext.example.pascal.Pascal.var_");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)?
;

// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); }
	iv_ruleexpression_list=ruleexpression_list
	{ $current=$iv_ruleexpression_list.current; }
	EOF;

// Rule expression_list
ruleexpression_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionsExpressionParserRuleCall_0_0());
				}
				lv_expressions_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpression_listRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionsExpressionParserRuleCall_1_1_0());
					}
					lv_expressions_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_listRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"org.xtext.example.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressionsSimple_expressionParserRuleCall_0_0());
				}
				lv_expressions_0_0=rulesimple_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"org.xtext.example.pascal.Pascal.simple_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_operators_1_0=RULE_RELATIONAL_OP
						{
							newLeafNode(lv_operators_1_0, grammarAccess.getExpressionAccess().getOperatorsRELATIONAL_OPTerminalRuleCall_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExpressionRule());
							}
							addWithLastConsumed(
								$current,
								"operators",
								lv_operators_1_0,
								"org.xtext.example.pascal.Pascal.RELATIONAL_OP");
						}
					)
				)
				    |
				(
					(
						lv_operators_2_0='in'
						{
							newLeafNode(lv_operators_2_0, grammarAccess.getExpressionAccess().getOperatorsInKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExpressionRule());
							}
							addWithLastConsumed($current, "operators", lv_operators_2_0, "in");
						}
					)
				)
				    |
				(
					(
						lv_operators_3_0='='
						{
							newLeafNode(lv_operators_3_0, grammarAccess.getExpressionAccess().getOperatorsEqualsSignKeyword_1_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExpressionRule());
							}
							addWithLastConsumed($current, "operators", lv_operators_3_0, "=");
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpressionsSimple_expressionParserRuleCall_1_1_0());
					}
					lv_expressions_4_0=rulesimple_expression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_4_0,
							"org.xtext.example.pascal.Pascal.simple_expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); }
	iv_rulesimple_expression=rulesimple_expression
	{ $current=$iv_rulesimple_expression.current; }
	EOF;

// Rule simple_expression
rulesimple_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_prefixOperator_0_0=RULE_ADDITION_OP
				{
					newLeafNode(lv_prefixOperator_0_0, grammarAccess.getSimple_expressionAccess().getPrefixOperatorADDITION_OPTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimple_expressionRule());
					}
					setWithLastConsumed(
						$current,
						"prefixOperator",
						lv_prefixOperator_0_0,
						"org.xtext.example.pascal.Pascal.ADDITION_OP");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermsTermParserRuleCall_1_0());
				}
				lv_terms_1_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
					}
					add(
						$current,
						"terms",
						lv_terms_1_0,
						"org.xtext.example.pascal.Pascal.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						(
							lv_operators_2_0=RULE_ADDITION_OP
							{
								newLeafNode(lv_operators_2_0, grammarAccess.getSimple_expressionAccess().getOperatorsADDITION_OPTerminalRuleCall_2_0_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSimple_expressionRule());
								}
								addWithLastConsumed(
									$current,
									"operators",
									lv_operators_2_0,
									"org.xtext.example.pascal.Pascal.ADDITION_OP");
							}
						)
					)
					    |
					(
						(
							lv_operators_3_0='or'
							{
								newLeafNode(lv_operators_3_0, grammarAccess.getSimple_expressionAccess().getOperatorsOrKeyword_2_0_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSimple_expressionRule());
								}
								addWithLastConsumed($current, "operators", lv_operators_3_0, "or");
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermsTermParserRuleCall_2_0_1_0());
						}
						lv_terms_4_0=ruleterm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
							}
							add(
								$current,
								"terms",
								lv_terms_4_0,
								"org.xtext.example.pascal.Pascal.term");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermsUnsigned_numberParserRuleCall_2_1_0());
					}
					lv_terms_5_0=ruleunsigned_number
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
						}
						add(
							$current,
							"terms",
							lv_terms_5_0,
							"org.xtext.example.pascal.Pascal.unsigned_number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getFactorsFactorParserRuleCall_0_0());
				}
				lv_factors_0_0=rulefactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					add(
						$current,
						"factors",
						lv_factors_0_0,
						"org.xtext.example.pascal.Pascal.factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_operators_1_0=RULE_MULTIPLICATION_OP
						{
							newLeafNode(lv_operators_1_0, grammarAccess.getTermAccess().getOperatorsMULTIPLICATION_OPTerminalRuleCall_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTermRule());
							}
							addWithLastConsumed(
								$current,
								"operators",
								lv_operators_1_0,
								"org.xtext.example.pascal.Pascal.MULTIPLICATION_OP");
						}
					)
				)
				    |
				(
					(
						lv_operators_2_0='div'
						{
							newLeafNode(lv_operators_2_0, grammarAccess.getTermAccess().getOperatorsDivKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTermRule());
							}
							addWithLastConsumed($current, "operators", lv_operators_2_0, "div");
						}
					)
				)
				    |
				(
					(
						lv_operators_3_0='mod'
						{
							newLeafNode(lv_operators_3_0, grammarAccess.getTermAccess().getOperatorsModKeyword_1_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTermRule());
							}
							addWithLastConsumed($current, "operators", lv_operators_3_0, "mod");
						}
					)
				)
				    |
				(
					(
						lv_operators_4_0='and'
						{
							newLeafNode(lv_operators_4_0, grammarAccess.getTermAccess().getOperatorsAndKeyword_1_0_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTermRule());
							}
							addWithLastConsumed($current, "operators", lv_operators_4_0, "and");
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getFactorsFactorParserRuleCall_1_1_0());
					}
					lv_factors_5_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"factors",
							lv_factors_5_0,
							"org.xtext.example.pascal.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current; }
	EOF;

// Rule factor
rulefactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.example.pascal.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_1_0());
				}
				lv_number_1_0=rulenumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"number",
						lv_number_1_0,
						"org.xtext.example.pascal.Pascal.number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getFactorAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getSetSetParserRuleCall_3_0());
				}
				lv_set_3_0=ruleset
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"set",
						lv_set_3_0,
						"org.xtext.example.pascal.Pascal.set");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_nil_4_0='nil'
				{
					newLeafNode(lv_nil_4_0, grammarAccess.getFactorAccess().getNilNilKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed($current, "nil", true, "nil");
				}
			)
		)
		    |
		(
			(
				lv_boolean_5_0='true'
				{
					newLeafNode(lv_boolean_5_0, grammarAccess.getFactorAccess().getBooleanTrueKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed($current, "boolean", lv_boolean_5_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_boolean_6_0='false'
				{
					newLeafNode(lv_boolean_6_0, grammarAccess.getFactorAccess().getBooleanFalseKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed($current, "boolean", lv_boolean_6_0, "false");
				}
			)
		)
		    |
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_7_1_0());
					}
					lv_expression_8_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"org.xtext.example.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getFactorAccess().getRightParenthesisKeyword_7_2());
			}
		)
		    |
		(
			otherlv_10='not'
			{
				newLeafNode(otherlv_10, grammarAccess.getFactorAccess().getNotKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getNotFactorParserRuleCall_8_1_0());
					}
					lv_not_11_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"not",
							lv_not_11_0,
							"org.xtext.example.pascal.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulefunction_designator
entryRulefunction_designator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_designatorRule()); }
	iv_rulefunction_designator=rulefunction_designator
	{ $current=$iv_rulefunction_designator.current; }
	EOF;

// Rule function_designator
rulefunction_designator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunction_designatorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunction_designatorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_designatorAccess().getExpressionsExpression_listParserRuleCall_2_0());
				}
				lv_expressions_2_0=ruleexpression_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_designatorRule());
					}
					set(
						$current,
						"expressions",
						lv_expressions_2_0,
						"org.xtext.example.pascal.Pascal.expression_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulefunction_procedure_declaration
entryRulefunction_procedure_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_procedure_declarationRule()); }
	iv_rulefunction_procedure_declaration=rulefunction_procedure_declaration
	{ $current=$iv_rulefunction_procedure_declaration.current; }
	EOF;

// Rule function_procedure_declaration
rulefunction_procedure_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_procedure_declarationAccess().getProceduresProcedure_declarationParserRuleCall_0_0());
				}
				lv_procedures_0_0=ruleprocedure_declaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_procedure_declarationRule());
					}
					add(
						$current,
						"procedures",
						lv_procedures_0_0,
						"org.xtext.example.pascal.Pascal.procedure_declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunction_procedure_declarationAccess().getSemicolonKeyword_1());
		}
	)+
;

// Entry rule entryRuleprocedure_declaration
entryRuleprocedure_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_declarationRule()); }
	iv_ruleprocedure_declaration=ruleprocedure_declaration
	{ $current=$iv_ruleprocedure_declaration.current; }
	EOF;

// Rule procedure_declaration
ruleprocedure_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_declarationAccess().getHeadingProcedure_headingParserRuleCall_0_0());
				}
				lv_heading_0_0=ruleprocedure_heading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_declarationRule());
					}
					set(
						$current,
						"heading",
						lv_heading_0_0,
						"org.xtext.example.pascal.Pascal.procedure_heading");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedure_declarationAccess().getSemicolonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_declarationAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_declarationRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"org.xtext.example.pascal.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedure_heading
entryRuleprocedure_heading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_headingRule()); }
	iv_ruleprocedure_heading=ruleprocedure_heading
	{ $current=$iv_ruleprocedure_heading.current; }
	EOF;

// Rule procedure_heading
ruleprocedure_heading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedure_headingAccess().getProcedureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProcedure_headingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcedure_headingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_headingAccess().getParametersFormal_parameter_listParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_headingRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.xtext.example.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleformal_parameter_list
entryRuleformal_parameter_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormal_parameter_listRule()); }
	iv_ruleformal_parameter_list=ruleformal_parameter_list
	{ $current=$iv_ruleformal_parameter_list.current; }
	EOF;

// Rule formal_parameter_list
ruleformal_parameter_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormal_parameter_listAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getParametersFormal_parameter_sectionParserRuleCall_1_0());
				}
				lv_parameters_1_0=ruleformal_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_listRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_1_0,
						"org.xtext.example.pascal.Pascal.formal_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getFormal_parameter_listAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getParametersFormal_parameter_sectionParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleformal_parameter_section
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormal_parameter_listRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"org.xtext.example.pascal.Pascal.formal_parameter_section");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormal_parameter_listAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleformal_parameter_section
entryRuleformal_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormal_parameter_sectionRule()); }
	iv_ruleformal_parameter_section=ruleformal_parameter_section
	{ $current=$iv_ruleformal_parameter_section.current; }
	EOF;

// Rule formal_parameter_section
ruleformal_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getValueValue_parameter_sectionParserRuleCall_0_0());
				}
				lv_value_0_0=rulevalue_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.xtext.example.pascal.Pascal.value_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getVariableVariable_parameter_sectionParserRuleCall_1_0());
				}
				lv_variable_1_0=rulevariable_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtext.example.pascal.Pascal.variable_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getProcedureProcedure_headingParserRuleCall_2_0());
				}
				lv_procedure_2_0=ruleprocedure_heading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"procedure",
						lv_procedure_2_0,
						"org.xtext.example.pascal.Pascal.procedure_heading");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevalue_parameter_section
entryRulevalue_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValue_parameter_sectionRule()); }
	iv_rulevalue_parameter_section=rulevalue_parameter_section
	{ $current=$iv_rulevalue_parameter_section.current; }
	EOF;

// Rule value_parameter_section
rulevalue_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValue_parameter_sectionAccess().getIdentifiersIdentifier_listParserRuleCall_0_0());
				}
				lv_identifiers_0_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValue_parameter_sectionRule());
					}
					set(
						$current,
						"identifiers",
						lv_identifiers_0_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getValue_parameter_sectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValue_parameter_sectionAccess().getTypeParameter_typeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleparameter_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValue_parameter_sectionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.parameter_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); }
	iv_ruleidentifier_list=ruleidentifier_list
	{ $current=$iv_ruleidentifier_list.current; }
	EOF;

// Rule identifier_list
ruleidentifier_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifier_listRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifier_listRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleparameter_type
entryRuleparameter_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameter_typeRule()); }
	iv_ruleparameter_type=ruleparameter_type
	{ $current=$iv_ruleparameter_type.current; }
	EOF;

// Rule parameter_type
ruleparameter_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParameter_typeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameter_typeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulevariable_parameter_section
entryRulevariable_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_parameter_sectionRule()); }
	iv_rulevariable_parameter_section=rulevariable_parameter_section
	{ $current=$iv_rulevariable_parameter_section.current; }
	EOF;

// Rule variable_parameter_section
rulevariable_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariable_parameter_sectionAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_parameter_sectionAccess().getIndentifiersIdentifier_listParserRuleCall_1_0());
				}
				lv_indentifiers_1_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_parameter_sectionRule());
					}
					set(
						$current,
						"indentifiers",
						lv_indentifiers_1_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariable_parameter_sectionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_parameter_sectionAccess().getTypeParameter_typeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleparameter_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_parameter_sectionRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtext.example.pascal.Pascal.parameter_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleset
entryRuleset returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	iv_ruleset=ruleset
	{ $current=$iv_ruleset.current; }
	EOF;

// Rule set
ruleset returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_brackets_0_0='['
				{
					newLeafNode(lv_brackets_0_0, grammarAccess.getSetAccess().getBracketsLeftSquareBracketKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetRule());
					}
					addWithLastConsumed($current, "brackets", lv_brackets_0_0, "[");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSetAccess().getExpressionsExpression_listParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleexpression_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRule());
					}
					set(
						$current,
						"expressions",
						lv_expressions_1_0,
						"org.xtext.example.pascal.Pascal.expression_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_brackets_2_0=']'
				{
					newLeafNode(lv_brackets_2_0, grammarAccess.getSetAccess().getBracketsRightSquareBracketKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetRule());
					}
					addWithLastConsumed($current, "brackets", lv_brackets_2_0, "]");
				}
			)
		)
	)
;

// Entry rule entryRulenumber
entryRulenumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_rulenumber=rulenumber
	{ $current=$iv_rulenumber.current; }
	EOF;

// Rule number
rulenumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberAccess().getNumberAny_numberParserRuleCall_0());
			}
			lv_number_0_0=ruleany_number
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumberRule());
				}
				set(
					$current,
					"number",
					lv_number_0_0,
					"org.xtext.example.pascal.Pascal.any_number");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleany_number
entryRuleany_number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAny_numberRule()); }
	iv_ruleany_number=ruleany_number
	{ $current=$iv_ruleany_number.current; }
	EOF;

// Rule any_number
ruleany_number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAny_numberAccess().getUnsigned_numberParserRuleCall_0());
		}
		this_unsigned_number_0=ruleunsigned_number
		{
			$current = $this_unsigned_number_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAny_numberAccess().getSigned_numberParserRuleCall_1());
		}
		this_signed_number_1=rulesigned_number
		{
			$current = $this_signed_number_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulelabel_declaration
entryRulelabel_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabel_declarationRule()); }
	iv_rulelabel_declaration=rulelabel_declaration
	{ $current=$iv_rulelabel_declaration.current; }
	EOF;

// Rule label_declaration
rulelabel_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='label'
		{
			newLeafNode(otherlv_0, grammarAccess.getLabel_declarationAccess().getLabelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabel_declarationAccess().getLabelsLabelParserRuleCall_1_0());
				}
				lv_labels_1_0=rulelabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabel_declarationRule());
					}
					add(
						$current,
						"labels",
						lv_labels_1_0,
						"org.xtext.example.pascal.Pascal.label");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLabel_declarationAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabel_declarationAccess().getLabelsLabelParserRuleCall_2_1_0());
					}
					lv_labels_3_0=rulelabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabel_declarationRule());
						}
						add(
							$current,
							"labels",
							lv_labels_3_0,
							"org.xtext.example.pascal.Pascal.label");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getLabel_declarationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleconstant=ruleconstant
	{ $current=$iv_ruleconstant.current; }
	EOF;

// Rule constant
ruleconstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_opterator_0_0=RULE_ADDITION_OP
					{
						newLeafNode(lv_opterator_0_0, grammarAccess.getConstantAccess().getOpteratorADDITION_OPTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"opterator",
							lv_opterator_0_0,
							"org.xtext.example.pascal.Pascal.ADDITION_OP");
					}
				)
			)?
			(
				(
					(
						lv_name_1_0=RULE_ID
						{
							newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstantRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_1_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getConstantAccess().getNumberNumberParserRuleCall_0_1_1_0());
						}
						lv_number_2_0=rulenumber
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstantRule());
							}
							set(
								$current,
								"number",
								lv_number_2_0,
								"org.xtext.example.pascal.Pascal.number");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				lv_string_3_0=RULE_STRING
				{
					newLeafNode(lv_string_3_0, grammarAccess.getConstantAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_boolLiteral_4_0='true'
				{
					newLeafNode(lv_boolLiteral_4_0, grammarAccess.getConstantAccess().getBoolLiteralTrueKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed($current, "boolLiteral", lv_boolLiteral_4_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_boolLiteral_5_0='false'
				{
					newLeafNode(lv_boolLiteral_5_0, grammarAccess.getConstantAccess().getBoolLiteralFalseKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed($current, "boolLiteral", lv_boolLiteral_5_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleconstant_definition_part
entryRuleconstant_definition_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_definition_partRule()); }
	iv_ruleconstant_definition_part=ruleconstant_definition_part
	{ $current=$iv_ruleconstant_definition_part.current; }
	EOF;

// Rule constant_definition_part
ruleconstant_definition_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstant_definition_partAccess().getConstKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstsConstant_definitionParserRuleCall_1_0_0());
					}
					lv_consts_1_0=ruleconstant_definition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_definition_partRule());
						}
						add(
							$current,
							"consts",
							lv_consts_1_0,
							"org.xtext.example.pascal.Pascal.constant_definition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_1_1());
			}
		)+
	)
;

// Entry rule entryRuleconstant_definition
entryRuleconstant_definition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_definitionRule()); }
	iv_ruleconstant_definition=ruleconstant_definition
	{ $current=$iv_ruleconstant_definition.current; }
	EOF;

// Rule constant_definition
ruleconstant_definition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConstant_definitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstant_definitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getConstant_definitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstant_definitionAccess().getConstConstantParserRuleCall_2_0());
				}
				lv_const_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstant_definitionRule());
					}
					set(
						$current,
						"const",
						lv_const_2_0,
						"org.xtext.example.pascal.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype_definition_part
entryRuletype_definition_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_definition_partRule()); }
	iv_ruletype_definition_part=ruletype_definition_part
	{ $current=$iv_ruletype_definition_part.current; }
	EOF;

// Rule type_definition_part
ruletype_definition_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getType_definition_partAccess().getTypeKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getType_definition_partAccess().getTypesType_definitionParserRuleCall_1_0_0());
					}
					lv_types_1_0=ruletype_definition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getType_definition_partRule());
						}
						add(
							$current,
							"types",
							lv_types_1_0,
							"org.xtext.example.pascal.Pascal.type_definition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_1_1());
			}
		)+
	)
;

// Entry rule entryRuletype_definition
entryRuletype_definition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_definitionRule()); }
	iv_ruletype_definition=ruletype_definition
	{ $current=$iv_ruletype_definition.current; }
	EOF;

// Rule type_definition
ruletype_definition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getType_definitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getType_definitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getType_definitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getType_definitionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getType_definitionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getSimpleSimple_typeParserRuleCall_0_0());
				}
				lv_simple_0_0=rulesimple_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"simple",
						lv_simple_0_0,
						"org.xtext.example.pascal.Pascal.simple_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getStructuredStructured_typeParserRuleCall_1_0());
				}
				lv_structured_1_0=rulestructured_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"structured",
						lv_structured_1_0,
						"org.xtext.example.pascal.Pascal.structured_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getPointerPointer_typeParserRuleCall_2_0());
				}
				lv_pointer_2_0=rulepointer_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"pointer",
						lv_pointer_2_0,
						"org.xtext.example.pascal.Pascal.pointer_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimple_type
entryRulesimple_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_typeRule()); }
	iv_rulesimple_type=rulesimple_type
	{ $current=$iv_rulesimple_type.current; }
	EOF;

// Rule simple_type
rulesimple_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getSubrangeSubrange_typeParserRuleCall_0_0());
				}
				lv_subrange_0_0=rulesubrange_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					set(
						$current,
						"subrange",
						lv_subrange_0_0,
						"org.xtext.example.pascal.Pascal.subrange_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getEnumeratedEnumerated_typeParserRuleCall_1_0());
				}
				lv_enumerated_1_0=ruleenumerated_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					set(
						$current,
						"enumerated",
						lv_enumerated_1_0,
						"org.xtext.example.pascal.Pascal.enumerated_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSimple_typeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimple_typeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulesubrange_type
entryRulesubrange_type returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getSubrange_typeRule()); }
	iv_rulesubrange_type=rulesubrange_type
	{ $current=$iv_rulesubrange_type.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule subrange_type
rulesubrange_type returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSubrange_typeAccess().getInitialConstConstantParserRuleCall_0_0_0());
					}
					lv_initialConst_0_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
						}
						set(
							$current,
							"initialConst",
							lv_initialConst_0_0,
							"org.xtext.example.pascal.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getSubrange_typeAccess().getFullStopFullStopKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubrange_typeAccess().getFinalConstConstantParserRuleCall_0_2_0());
					}
					lv_finalConst_2_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
						}
						set(
							$current,
							"finalConst",
							lv_finalConst_2_0,
							"org.xtext.example.pascal.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_subrange_3_0=RULE_NUMERIC_SUBRANGE
					{
						newLeafNode(lv_subrange_3_0, grammarAccess.getSubrange_typeAccess().getSubrangeNUMERIC_SUBRANGETerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSubrange_typeRule());
						}
						setWithLastConsumed(
							$current,
							"subrange",
							lv_subrange_3_0,
							"org.xtext.example.pascal.Pascal.NUMERIC_SUBRANGE");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSubrange_typeAccess().getConstConstantParserRuleCall_1_1_0());
					}
					lv_const_4_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
						}
						set(
							$current,
							"const",
							lv_const_4_0,
							"org.xtext.example.pascal.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleenumerated_type
entryRuleenumerated_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerated_typeRule()); }
	iv_ruleenumerated_type=ruleenumerated_type
	{ $current=$iv_ruleenumerated_type.current; }
	EOF;

// Rule enumerated_type
ruleenumerated_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerated_typeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerated_typeAccess().getIdentifiersIdentifier_listParserRuleCall_1_0());
				}
				lv_identifiers_1_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerated_typeRule());
					}
					set(
						$current,
						"identifiers",
						lv_identifiers_1_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumerated_typeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulestructured_type
entryRulestructured_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructured_typeRule()); }
	iv_rulestructured_type=rulestructured_type
	{ $current=$iv_rulestructured_type.current; }
	EOF;

// Rule structured_type
rulestructured_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_packed_0_0='packed'
				{
					newLeafNode(lv_packed_0_0, grammarAccess.getStructured_typeAccess().getPackedPackedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStructured_typeRule());
					}
					setWithLastConsumed($current, "packed", true, "packed");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStructured_typeAccess().getTypeUnpacked_structured_typeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleunpacked_structured_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructured_typeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.example.pascal.Pascal.unpacked_structured_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunpacked_structured_type
entryRuleunpacked_structured_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnpacked_structured_typeRule()); }
	iv_ruleunpacked_structured_type=ruleunpacked_structured_type
	{ $current=$iv_ruleunpacked_structured_type.current; }
	EOF;

// Rule unpacked_structured_type
ruleunpacked_structured_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getRecordRecord_typeParserRuleCall_0());
			}
			lv_record_0_0=rulerecord_type
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnpacked_structured_typeRule());
				}
				set(
					$current,
					"record",
					lv_record_0_0,
					"org.xtext.example.pascal.Pascal.record_type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulerecord_type
entryRulerecord_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecord_typeRule()); }
	iv_rulerecord_type=rulerecord_type
	{ $current=$iv_rulerecord_type.current; }
	EOF;

// Rule record_type
rulerecord_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_recordKeyword_0_0='record'
				{
					newLeafNode(lv_recordKeyword_0_0, grammarAccess.getRecord_typeAccess().getRecordKeywordRecordKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecord_typeRule());
					}
					setWithLastConsumed($current, "recordKeyword", lv_recordKeyword_0_0, "record");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRecord_typeAccess().getFieldsField_listParserRuleCall_1_0());
				}
				lv_fields_1_0=rulefield_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecord_typeRule());
					}
					set(
						$current,
						"fields",
						lv_fields_1_0,
						"org.xtext.example.pascal.Pascal.field_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_endKeyword_2_0='end'
				{
					newLeafNode(lv_endKeyword_2_0, grammarAccess.getRecord_typeAccess().getEndKeywordEndKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecord_typeRule());
					}
					setWithLastConsumed($current, "endKeyword", lv_endKeyword_2_0, "end");
				}
			)
		)
	)
;

// Entry rule entryRulefield_list
entryRulefield_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getField_listRule()); }
	iv_rulefield_list=rulefield_list
	{ $current=$iv_rulefield_list.current; }
	EOF;

// Rule field_list
rulefield_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getField_listAccess().getFixedFixed_partParserRuleCall_0_0_0_0());
						}
						lv_fixed_0_0=rulefixed_part
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getField_listRule());
							}
							set(
								$current,
								"fixed",
								lv_fixed_0_0,
								"org.xtext.example.pascal.Pascal.fixed_part");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_1=';'
					{
						newLeafNode(otherlv_1, grammarAccess.getField_listAccess().getSemicolonKeyword_0_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getField_listAccess().getVariantsVariant_partParserRuleCall_0_0_1_1_0());
							}
							lv_variants_2_0=rulevariant_part
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getField_listRule());
								}
								add(
									$current,
									"variants",
									lv_variants_2_0,
									"org.xtext.example.pascal.Pascal.variant_part");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getField_listAccess().getVariantsVariant_partParserRuleCall_0_1_0());
					}
					lv_variants_3_0=rulevariant_part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getField_listRule());
						}
						add(
							$current,
							"variants",
							lv_variants_3_0,
							"org.xtext.example.pascal.Pascal.variant_part");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getField_listAccess().getSemicolonKeyword_1());
			}
		)?
	)
;

// Entry rule entryRulefixed_part
entryRulefixed_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixed_partRule()); }
	iv_rulefixed_part=rulefixed_part
	{ $current=$iv_rulefixed_part.current; }
	EOF;

// Rule fixed_part
rulefixed_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFixed_partAccess().getSectionsRecord_sectionParserRuleCall_0_0());
				}
				lv_sections_0_0=rulerecord_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFixed_partRule());
					}
					add(
						$current,
						"sections",
						lv_sections_0_0,
						"org.xtext.example.pascal.Pascal.record_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getFixed_partAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFixed_partAccess().getSectionsRecord_sectionParserRuleCall_1_1_0());
					}
					lv_sections_2_0=rulerecord_section
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFixed_partRule());
						}
						add(
							$current,
							"sections",
							lv_sections_2_0,
							"org.xtext.example.pascal.Pascal.record_section");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulerecord_section
entryRulerecord_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecord_sectionRule()); }
	iv_rulerecord_section=rulerecord_section
	{ $current=$iv_rulerecord_section.current; }
	EOF;

// Rule record_section
rulerecord_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecord_sectionAccess().getIdentifiersIdentifier_listParserRuleCall_0_0());
				}
				lv_identifiers_0_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecord_sectionRule());
					}
					set(
						$current,
						"identifiers",
						lv_identifiers_0_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecord_sectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecord_sectionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecord_sectionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariant_part
entryRulevariant_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariant_partRule()); }
	iv_rulevariant_part=rulevariant_part
	{ $current=$iv_rulevariant_part.current; }
	EOF;

// Rule variant_part
rulevariant_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariant_partAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariant_partAccess().getTagTag_fieldParserRuleCall_1_0());
				}
				lv_tag_1_0=ruletag_field
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariant_partRule());
					}
					set(
						$current,
						"tag",
						lv_tag_1_0,
						"org.xtext.example.pascal.Pascal.tag_field");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVariant_partAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariant_partRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariant_partAccess().getOfKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariant_partAccess().getVariantsVariantParserRuleCall_4_0());
				}
				lv_variants_4_0=rulevariant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariant_partRule());
					}
					add(
						$current,
						"variants",
						lv_variants_4_0,
						"org.xtext.example.pascal.Pascal.variant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getVariant_partAccess().getSemicolonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariant_partAccess().getVariantsVariantParserRuleCall_5_1_0());
					}
					lv_variants_6_0=rulevariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariant_partRule());
						}
						add(
							$current,
							"variants",
							lv_variants_6_0,
							"org.xtext.example.pascal.Pascal.variant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuletag_field
entryRuletag_field returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTag_fieldRule()); }
	iv_ruletag_field=ruletag_field
	{ $current=$iv_ruletag_field.current; }
	EOF;

// Rule tag_field
ruletag_field returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTag_fieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTag_fieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTag_fieldAccess().getColonKeyword_1());
		}
	)
;

// Entry rule entryRulevariant
entryRulevariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantRule()); }
	iv_rulevariant=rulevariant
	{ $current=$iv_rulevariant.current; }
	EOF;

// Rule variant
rulevariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getLabelsCase_label_listParserRuleCall_0_0());
				}
				lv_labels_0_0=rulecase_label_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"labels",
						lv_labels_0_0,
						"org.xtext.example.pascal.Pascal.case_label_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariantAccess().getColonKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getFieldsField_listParserRuleCall_3_0());
				}
				lv_fields_3_0=rulefield_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"fields",
						lv_fields_3_0,
						"org.xtext.example.pascal.Pascal.field_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariantAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulecase_label_list
entryRulecase_label_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCase_label_listRule()); }
	iv_rulecase_label_list=rulecase_label_list
	{ $current=$iv_rulecase_label_list.current; }
	EOF;

// Rule case_label_list
rulecase_label_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantsConstantParserRuleCall_0_0());
				}
				lv_constants_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_label_listRule());
					}
					add(
						$current,
						"constants",
						lv_constants_0_0,
						"org.xtext.example.pascal.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getCase_label_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantsConstantParserRuleCall_1_1_0());
					}
					lv_constants_2_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCase_label_listRule());
						}
						add(
							$current,
							"constants",
							lv_constants_2_0,
							"org.xtext.example.pascal.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulepointer_type
entryRulepointer_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointer_typeRule()); }
	iv_rulepointer_type=rulepointer_type
	{ $current=$iv_rulepointer_type.current; }
	EOF;

// Rule pointer_type
rulepointer_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='^'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointer_typeAccess().getCircumflexAccentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointer_typeAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointer_typeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesigned_number
entryRulesigned_number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSigned_numberRule()); }
	iv_rulesigned_number=rulesigned_number
	{ $current=$iv_rulesigned_number.current; }
	EOF;

// Rule signed_number
rulesigned_number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_integer_0_0=RULE_SIGNED_INTEGER_NUMBER
				{
					newLeafNode(lv_integer_0_0, grammarAccess.getSigned_numberAccess().getIntegerSIGNED_INTEGER_NUMBERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSigned_numberRule());
					}
					setWithLastConsumed(
						$current,
						"integer",
						lv_integer_0_0,
						"org.xtext.example.pascal.Pascal.SIGNED_INTEGER_NUMBER");
				}
			)
		)
		    |
		(
			(
				lv_real_1_0=RULE_SIGNED_REAL_NUMBER
				{
					newLeafNode(lv_real_1_0, grammarAccess.getSigned_numberAccess().getRealSIGNED_REAL_NUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSigned_numberRule());
					}
					setWithLastConsumed(
						$current,
						"real",
						lv_real_1_0,
						"org.xtext.example.pascal.Pascal.SIGNED_REAL_NUMBER");
				}
			)
		)
	)
;

// Entry rule entryRuleunsigned_number
entryRuleunsigned_number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsigned_numberRule()); }
	iv_ruleunsigned_number=ruleunsigned_number
	{ $current=$iv_ruleunsigned_number.current; }
	EOF;

// Rule unsigned_number
ruleunsigned_number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_integer_0_0=RULE_INTEGER_NUMBER
				{
					newLeafNode(lv_integer_0_0, grammarAccess.getUnsigned_numberAccess().getIntegerINTEGER_NUMBERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnsigned_numberRule());
					}
					setWithLastConsumed(
						$current,
						"integer",
						lv_integer_0_0,
						"org.xtext.example.pascal.Pascal.INTEGER_NUMBER");
				}
			)
		)
		    |
		(
			(
				lv_real_1_0=RULE_REAL_NUMBER
				{
					newLeafNode(lv_real_1_0, grammarAccess.getUnsigned_numberAccess().getRealREAL_NUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnsigned_numberRule());
					}
					setWithLastConsumed(
						$current,
						"real",
						lv_real_1_0,
						"org.xtext.example.pascal.Pascal.REAL_NUMBER");
				}
			)
		)
	)
;

// Entry rule entryRulevariable_declaration_part
entryRulevariable_declaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_declaration_partRule()); }
	iv_rulevariable_declaration_part=rulevariable_declaration_part
	{ $current=$iv_rulevariable_declaration_part.current; }
	EOF;

// Rule variable_declaration_part
rulevariable_declaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariable_declaration_partAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getSectionsVariable_sectionParserRuleCall_1_0());
				}
				lv_sections_1_0=rulevariable_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_declaration_partRule());
					}
					add(
						$current,
						"sections",
						lv_sections_1_0,
						"org.xtext.example.pascal.Pascal.variable_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getSectionsVariable_sectionParserRuleCall_3_0_0());
					}
					lv_sections_3_0=rulevariable_section
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariable_declaration_partRule());
						}
						add(
							$current,
							"sections",
							lv_sections_3_0,
							"org.xtext.example.pascal.Pascal.variable_section");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRulevariable_section
entryRulevariable_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_sectionRule()); }
	iv_rulevariable_section=rulevariable_section
	{ $current=$iv_rulevariable_section.current; }
	EOF;

// Rule variable_section
rulevariable_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_sectionAccess().getIdentifiersVariable_identifier_listParserRuleCall_0_0());
				}
				lv_identifiers_0_0=rulevariable_identifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_sectionRule());
					}
					set(
						$current,
						"identifiers",
						lv_identifiers_0_0,
						"org.xtext.example.pascal.Pascal.variable_identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariable_sectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_sectionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_sectionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariable_identifier_list
entryRulevariable_identifier_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_identifier_listRule()); }
	iv_rulevariable_identifier_list=rulevariable_identifier_list
	{ $current=$iv_rulevariable_identifier_list.current; }
	EOF;

// Rule variable_identifier_list
rulevariable_identifier_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getVariable_identifier_listAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariable_identifier_listRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVariable_identifier_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getVariable_identifier_listAccess().getNamesIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariable_identifier_listRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

RULE_ADDITION_OP : ('+'|'-');

RULE_MULTIPLICATION_OP : ('*'|'/');

RULE_RELATIONAL_OP : ('='|'<>'|'<'|'<='|'>'|'>=');

RULE_PARENTHESES_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_CURLY_BRACKETS_COMMENT : '{' ( options {greedy=false;} : . )*'}';

RULE_NUMERIC_SUBRANGE : (RULE_INTEGER_NUMBER|RULE_REAL_NUMBER|RULE_SIGNED_INTEGER_NUMBER|RULE_SIGNED_REAL_NUMBER) '..';

fragment RULE_DIGIT_SEQUENCE : RULE_ADDITION_OP? RULE_INTEGER_NUMBER;

RULE_SIGNED_INTEGER_NUMBER : RULE_ADDITION_OP RULE_INTEGER_NUMBER;

RULE_INTEGER_NUMBER : RULE_INT;

RULE_REAL_NUMBER : (RULE_INTEGER_NUMBER '.' RULE_INTEGER_NUMBER? (('E'|'e') RULE_DIGIT_SEQUENCE)?|RULE_INTEGER_NUMBER ('E'|'e') RULE_DIGIT_SEQUENCE);

RULE_SIGNED_REAL_NUMBER : RULE_ADDITION_OP RULE_REAL_NUMBER;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
