grammar org.xtext.example.pascal.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/pascal/Pascal"

pascal:
	program += program
; 

program:
	heading=program_heading_block block=block "." 
;

program_heading_block:
	"program" name=ID ";"
;

block:
	( label=label_declaration) ?
	( type=type_definition_part) ?
	( variable=variable_declaration_part) ?
	( constant=constant_definition_part) ?
	( abstraction=function_procedure_declaration) ? 
	statement=statement_part
;

statement_part:
	"begin" sequence=statement_sequence "end"	
;

statement_sequence:
	statements+=statement ( ";" statements+=statement ) *
;

statement:  
	( label=label ":" ) ? ( simple=simple_statement )
;

simple_statement:
	( assignment=assignment_statement | function=function_designator | function_noargs=ID) ?	
;

assignment_statement: 
	variable=variable ":=" expression=expression	
;

label:
	number=SIGNED_INTEGER_NUMBER | number=INTEGER_NUMBER
;

variable: 
	name=ID variable=var_
;

var_:
	( "[" expressions=expression_list "]" array=var_ | accessor?="." name=ID variable=var_ | "^" pointer=var_ ) ?
;

expression_list:
	expressions+=expression ( "," expressions+=expression ) * 
;

expression:
	expressions+=simple_expression ( ( operators+=RELATIONAL_OP | operators+="in" | operators+="=" ) expressions+=simple_expression ) ?
;

simple_expression:
	(prefixOperator=ADDITION_OP) ? terms+=term ( ( operators+=ADDITION_OP | operators+="or" ) terms+=term | terms+=unsigned_number ) *
;

term:
	factors+=factor ( ( operators+=MULTIPLICATION_OP | operators+="div" | operators+="mod" | operators+="and" ) factors+=factor ) *
;

factor:
	variable=variable | number=number | string=STRING | set=set | nil?="nil" | boolean="true" | boolean="false" | function=function_designator | "(" expression=expression ")" | "not" not=factor
;

function_designator:
	name=ID "(" expressions=expression_list ? ")"
;

function_procedure_declaration:
	( (procedures+=function_declaration | functions+=procedure_declaration) ";" )+
;

function_heading:
	"function" name=ID (parameters=formal_parameter_list)? ":" returnType=ID
;

function_declaration:
	heading=function_heading ";" block=block
;

formal_parameter_list:
	"(" parameters+=formal_parameter_section ( ";" parameters+=formal_parameter_section)* ")"
;

formal_parameter_section:
	value=value_parameter_section | variable=variable_parameter_section | procedure=procedure_heading | function=function_heading
;

value_parameter_section:
	identifiers=identifier_list ":" type=parameter_type
;

identifier_list:
	names+=ID ( "," names+=ID ) *	
;

parameter_type:
	name=ID
;

variable_parameter_section:
	"var" indentifiers=identifier_list ":" type=parameter_type
;

procedure_declaration:
	heading=procedure_heading ";" block=block
;

procedure_heading:
	"procedure" name=ID (parameters=formal_parameter_list)? 
;

set:
	brackets+="[" expressions=expression_list ? brackets+="]"
;

number:
	number=any_number
;

any_number:
	unsigned_number | signed_number
;

label_declaration:
	"label" labels+=label ("," labels+=label) * ";"
;

constant:
	opterator=ADDITION_OP ? (name=ID | number=number) | string=STRING | boolLiteral="true" | boolLiteral="false"
;


constant_definition_part:
	"const" ( consts+=constant_definition ";") +	
;

constant_definition:
	name=ID "=" const=constant
;

type_definition_part:
	"type" (types+=type_definition ";") +
;

type_definition:
	name=ID "=" type=type
;

type:
	simple=simple_type | structured=structured_type | pointer=pointer_type
;

simple_type:
	subrange=subrange_type | enumerated=enumerated_type | name=ID
;

subrange_type hidden(WS):
	initialConst=constant ".." finalConst=constant | subrange=NUMERIC_SUBRANGE const=constant
;

enumerated_type:
	"(" identifiers=identifier_list ")"
;

structured_type:
	( packed?="packed" ) ? type=unpacked_structured_type
;

unpacked_structured_type:
	record=record_type
;

record_type:
	recordKeyword="record" fields=field_list? endKeyword="end"	
;

field_list:
	( fixed=fixed_part ( ";" variants+=variant_part ) ? | variants+=variant_part ) ( ";" ) ? 
;

fixed_part:
	sections+=record_section ( ";" sections+=record_section ) *
;

record_section:
	identifiers=identifier_list ":" type=type
;

variant_part:
	"case" tag=tag_field? name=ID "of" variants+=variant ( ";" variants+=variant ) *  	
;

tag_field:
	name=ID ":" 
;

variant:
	labels=case_label_list ":" "(" fields=field_list? ")"	
;

case_label_list:
	constants+=constant ( "," constants+=constant ) *	
;

pointer_type:
	"^" type=type
;

signed_number returns any_number:
	integer=SIGNED_INTEGER_NUMBER | real=SIGNED_REAL_NUMBER
;

unsigned_number returns any_number:
	integer=INTEGER_NUMBER | real=REAL_NUMBER
;

variable_declaration_part:
	"var" sections+=variable_section ";" ( sections+=variable_section ";" ) *
;

variable_section:
	identifiers=variable_identifier_list ":" type=type

;

variable_identifier_list:
	names+=ID ( "," names+=ID ) *
;

terminal ADDITION_OP:
	"+" | "-"
;

terminal MULTIPLICATION_OP:
	"*" | "/"
;

terminal RELATIONAL_OP:
	"=" | "<>" | "<" | "<=" | ">" | ">="	
;

terminal PARENTHESES_COMMENT: 
	'(*' -> '*)'
;

terminal CURLY_BRACKETS_COMMENT:
	'{' -> '}'
;

terminal NUMERIC_SUBRANGE:
	( INTEGER_NUMBER | REAL_NUMBER | SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER ) '..'
;

terminal DIGIT_SEQUENCE:
	ADDITION_OP ? INTEGER_NUMBER
;

terminal SIGNED_INTEGER_NUMBER:
	ADDITION_OP INTEGER_NUMBER
;

terminal INTEGER_NUMBER:
	INT
;

terminal REAL_NUMBER:
	INTEGER_NUMBER "." ( INTEGER_NUMBER ) ? ( ( "E" | "e" ) DIGIT_SEQUENCE ) ? |
	INTEGER_NUMBER ( "E" | "e" ) DIGIT_SEQUENCE
;

terminal SIGNED_REAL_NUMBER:
	ADDITION_OP REAL_NUMBER
;