/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.pascal.validation

import java.util.ArrayList
import java.util.Map
import java.util.Set
import java.util.HashMap
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.PascalPackage
import org.xtext.example.pascal.pascal.any_number
import org.xtext.example.pascal.pascal.assignment_statement
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.expression
import org.xtext.example.pascal.pascal.factor
import org.xtext.example.pascal.pascal.function_designator
import org.xtext.example.pascal.pascal.program
import org.xtext.example.pascal.pascal.simple_expression
import org.xtext.example.pascal.pascal.term
import org.xtext.example.pascal.pascal.type
import org.xtext.example.pascal.pascal.number;
import org.xtext.example.pascal.pascal.constant;
import org.xtext.example.pascal.pascal.variable;
import org.xtext.example.pascal.pascal.variable_declaration_part;
import org.xtext.example.pascal.pascal.variable_section

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	public static final Map<String, Map<String, Object>> artefacts = new HashMap<String, Map<String, Object>>();
	
	private var variables = new HashMap<String, variable_section>();
	
	@Check
	def fillArtefacts(program p) {
		var name = p.heading.name;
		if (!artefacts.containsKey(name)) {
			artefacts.put(name, new HashMap<String, Object>());
			artefacts.get(name).put("variables", variables);
//			artefacts.get(name).put("abstractions", abstractions);
//			artefacts.get(name).put("types", types);
//			artefacts.get(name).put("calculatedTypes", calculatedTypes);
		}
	}
	
		@Check
	def checaVariavelDeclaradaSemInicializar(variable_section varDecl) {
		if (!varDecl.identifiers.names.isNullOrEmpty()){
			for (String element : varDecl.identifiers.names) {
				if (!variables.containsKey(element)) {
					variables.put(element, varDecl)
				} else {
					error(" Duplicate identifier "+element, null);
				}
			}
		}
	}
	
	@Check
	def restart(program program) {
		artefacts.clear();
		variables.clear();
//		abstractions.clear();
	}
}
